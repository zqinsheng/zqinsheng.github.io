<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[微信小程序-WXSS特性]]></title>
      <url>/2019/04/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F06-WXSS%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>在了解完小程序WXML模板之后，再来了解小程序视图层另外一门语言WXSS，WXSS（WeiXin Style Sheets）是一套用于小程序的样式语言，用于描述WXML的组件样式，也就是视觉上的效果。WXSS与Web开发中的CSS类似。为了更适合小程序开发，WXSS对CSS做了一些补充以及修改。<br>WXSS（WeiXin Style Sheets）:是一套样式语言，用于描述WXML的组件样式。<br>CSS（Cascading Style Sheets）：是一套样式语言，是一种样式表语言，用来描述HTML或XML文档的呈现。<br>熟悉CSS开发的朋友，上手WXSS会很快，WXSS在CSS的基础上做了补充和修改，方便小程序开发。<br><a id="more"></a></p>
<h3 id="尺寸单位"><a href="#尺寸单位" class="headerlink" title="尺寸单位"></a>尺寸单位</h3><p>在WXSS中，引入了rpx（responsive pixel）尺寸单位。也就是响应式像素，引用新尺寸单位的目的是，适配不同宽度的屏幕，开发起来更简单。<br>和常用的px像素单位相比，rpx像素在px上做了转换,小程序编译后，rpx会做一次px换算。换算是以375个物理像素为基准，也就是在一个宽度为375物理像素的屏幕下，1rpx = 1px。<br>例如：屏幕宽度为375px，共750个物理像素，那么1rpx = 375 / 750 px = 0.5px，px和rpx是1：2的对应关系。<br>在实际的开发中，根据屏幕的宽度来确定合适的rpx像素。  </p>
<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p><strong>外联样式引用</strong><br>在小程序中可以通过<code>@import url(&#39;./test.css&#39;)</code>的方式来引入外部样式文件<br><strong>一个例子</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/wxml/index.wxml--&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;text class=&apos;content&apos;&gt;hello world!&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">// pages/wxml/index.wxss</span><br><span class="line">@import &apos;assets.wxss&apos;</span><br><span class="line">.content&#123;</span><br><span class="line">  color: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// pages/wxml/assets.wxss</span><br><span class="line">.content&#123;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>界面显示效果：<br><img src="http://wx4.sinaimg.cn/mw690/007HSgDpgy1g1yii4me63j305100y0of.jpg" alt><br>hello world文字引用了两个样式文件中的效果！<br><strong>注意样式的执行顺序是从上到下，从左往右</strong>,顺序在后的样式会覆盖之前的样式。  </p>
<p><strong>内联样式</strong><br>内联样式和web开发中的css一致，在标签内部写样式即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view style=&quot;color: red; font-size: 20rpx&quot;&gt;hello&lt;/view&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>WXSS选择器与CSS选择器类似,如下表所示:  </p>
<table>
<thead>
<tr>
<th>类型</th>
<th>选择器</th>
<th>样例</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>类选择器</td>
<td>.class</td>
<td>.content</td>
<td>选择所有拥有 class=”content” 的组件</td>
</tr>
<tr>
<td>id选择器</td>
<td>#id</td>
<td>#head-content</td>
<td>选择拥有 id=”head-content” 的组件</td>
</tr>
<tr>
<td>元素选择器</td>
<td>element</td>
<td>view checkbox</td>
<td>选择所有文档的 view 组件和所有的 checkbox 组件</td>
</tr>
<tr>
<td>伪元素选择器</td>
<td>::after</td>
<td>view::after</td>
<td>在 view 组件后边插入内容</td>
</tr>
<tr>
<td>伪元素选择器</td>
<td>::before</td>
<td>view::before</td>
<td>在 view 组件前边插入内容  </td>
</tr>
</tbody>
</table>
<p><strong>选择器优先级</strong><br>WXSS优先级与CSS类似,权重越高越优先。在优先级相同的情况下，后设置的样式优先级高于先设置的样式，根据权重的优先级加载样式。  </p>
<p><img src="http://wx4.sinaimg.cn/mw690/007HSgDpgy1g1yix0ojbaj30e8082gmy.jpg" alt>  </p>
<p><strong>官方样式库</strong><br>为了减轻开发者样式开发的工作量，微信小程序提供了WeUI.wxss基础样式库。具体使用文档可参考：<a href="https://github.com/Tencent/weui-wxss" target="_blank" rel="noopener">https://github.com/Tencent/weui-wxss</a></p>
]]></content>
      
        <categories>
            
            <category> 微信小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序-WXML特性之模板及引用]]></title>
      <url>/2019/04/09/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F05-WXML%E7%89%B9%E6%80%A7%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%8F%8A%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>WXML支持模板（template）的特性，可以在模板中定义代码片段，在不同的地方来调用或引入。使用name属性定义模板的名称，通过is名称来使用。<br>使用<code>&lt;template name=&quot;&quot;&gt;&lt;/template&gt;</code>定义模板<br>使用<code>&lt;template is=&quot;&quot; data=&quot;&quot;/&gt;</code>引用模板<br><a id="more"></a><br><strong>一个简单的例子</strong><br>定义模板：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template name=&quot;msgItem&quot;&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text&gt; 姓名:&#123;&#123;name&#125;&#125;，信息:&#123;&#123;msg&#125;&#125; &lt;/text&gt;</span><br><span class="line">    &lt;text&gt; 地址: &#123;&#123;address&#125;&#125; &lt;/text&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>
<p>使用is属性，声明需要的使用的模板，然后将模板所需要的 data 传入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  在js中对应的data</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    item: &#123;</span><br><span class="line">    name: &quot;小明&quot;,</span><br><span class="line">    msg: &apos;this is a student&apos;,</span><br><span class="line">    address: &apos;中国北京&apos;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;template name=&quot;msgItem&quot;&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text&gt; 姓名:&#123;&#123;name&#125;&#125;，信息:&#123;&#123;msg&#125;&#125; &lt;/text&gt;</span><br><span class="line">    &lt;text&gt; 地址: &#123;&#123;address&#125;&#125; &lt;/text&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;template is = &quot;msgItem&quot; data=&quot;&#123;&#123;...item&#125;&#125;&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 界面输出</span><br><span class="line">姓名：小明，信息：this is a student 地址：中国北京</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>动态使用模板</strong><br>is可以动态决定具体需要渲染哪个模板<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template name=&quot;odd&quot;&gt;</span><br><span class="line">  &lt;view&gt; odd &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;template name=&quot;even&quot;&gt;</span><br><span class="line">  &lt;view&gt; even &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;block wx:for=&quot;&#123;&#123;[1, 2, 3, 4, 5]&#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;template is=&quot;&#123;&#123;item % 2 == 0 ? &apos;even&apos; : &apos;odd&apos;&#125;&#125;&quot;/&gt;</span><br><span class="line">&lt;/block&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 输出</span><br><span class="line">odd</span><br><span class="line">even</span><br><span class="line">odd</span><br><span class="line">even</span><br><span class="line">odd</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>模板引用</strong><br>WXML 提供两种文件引用方式import和include。<br>我们来看一下这两种引用方式的区别：<br>首先，新建一个模板页面template<br><img src="http://wx3.sinaimg.cn/mw690/007HSgDpgy1g1xvbner9sj306w038743.jpg" alt><br>template.wxml文件中定义一个模板:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/template/template.wxml--&gt;</span><br><span class="line">&lt;text&gt;pages/template/template.wxml&lt;/text&gt;</span><br><span class="line">&lt;template name=&quot;templatePerson&quot;&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text&gt;我是模板一&lt;/text&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>
<p>template.js中设置内部状态变量person:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  person:&#123;</span><br><span class="line">    name:&quot;老张&quot;,</span><br><span class="line">    age:18,</span><br><span class="line">    phone:&quot;13212332112&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>使用import的方式来引入模板</strong><br>在index.wxml文件中引入上面定义的模板：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/wxml/index.wxml--&gt;</span><br><span class="line">&lt;!--只会 import 目标文件中定义的 template--&gt;</span><br><span class="line">&lt;import src=&quot;../template/template.wxml&quot;/&gt;</span><br><span class="line">&lt;template is=&quot;templatePerson&quot; data=&quot;&#123;&#123;...peoson&#125;&#125;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--在界面上输出</span><br><span class="line">    我是模板一</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>使用include的方式来引入模板</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/wxml/index.wxml--&gt;</span><br><span class="line">&lt;include src=&quot;../template/template.wxml&quot;/&gt;</span><br><span class="line">&lt;template is=&quot;templatePerson&quot; data=&quot;&#123;&#123;...peoson&#125;&#125;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--在界面上输出</span><br><span class="line">    pages/template/template.wxml</span><br><span class="line">    我是模板一</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>总结:</strong>  1.使用import方式只会引用目标文件中定义的template。2.include 可以将目标文件中除了将template引入，还会把整个代码引入，相当于是把代码拷贝到 include 的位置。</p>
<p><strong>注意事项</strong><br>import不具有递归特性，例如：有三个模板A，B，C。<br>C 引用 B，B 引用A，在C中可以使用B定义的 template，在B中可以使用A定义的 template ，但是C不能使用A定义的template</p>
]]></content>
      
        <categories>
            
            <category> 微信小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序-WXML特性之条件渲染和列表渲染]]></title>
      <url>/2019/04/09/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F04-WXML%E7%89%B9%E6%80%A7%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93%E5%92%8C%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/</url>
      <content type="html"><![CDATA[<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>界面上的数据可以通过条件判断的方式来动态显示<br>语法为：<code>wx:if</code><br>使用 wx:elif：<code>wx:elif=&quot;{判断条件}&quot;</code> 和 wx:else: <code>wx:else</code><br><a id="more"></a><br><strong>一个简单的例子</strong><br>根据条件选择今天吃啥，条件是1吃米饭，条件是2吃面条，其他条件吃米线<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/wxml/index.wxml--&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;text wx:if=&quot;&#123;&#123;condition==1&#125;&#125;&quot;&gt;</span><br><span class="line">    米饭</span><br><span class="line">  &lt;/text&gt;</span><br><span class="line">    &lt;text wx:elif=&quot;&#123;&#123;condition==2&#125;&#125;&quot;&gt;</span><br><span class="line">    面条</span><br><span class="line">  &lt;/text&gt;</span><br><span class="line">      &lt;text wx:else&gt;</span><br><span class="line">    米线</span><br><span class="line">  &lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// pages/wxml/index.js</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    //随机生成1，2，3的数字</span><br><span class="line">     condition:Math.floor(Math.random()*3+1)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></p>
<p><strong>条件渲染和hidden的区别</strong><br>使用条件渲染和改变标签的hidden属性都可以控制元素的显示，而hidden属性始终都会渲染出元素块，只是控制显示与否。hidden在界面初始化的时候会有更高的初始化消耗。<br>wx:if在切换时框架会进行局部渲染，保证元素块在销毁时会进行重新渲染，在切换时消耗更高。<br>根据场景情况，在元素频繁切换显示时建议使用hidden进行条件渲染。  </p>
<h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p>在我们的界面当中，如果内容比较少，我们可以一条一条的显示内容，但是当内容是一个整体或是一堆数据的时候，我们显示和更改就很麻烦，这个时候就可以用到小程序wxml的另外一个特性-列表渲染。<br>在组件上使用 <code>wx:for={数组名}}</code> 控制属性绑定一个数组或列表，即可使用各项数据渲染界面，<strong>默认的下标变量名为index，默认的当前项变量名为item</strong><br><strong>一个简单的例子</strong><br>比如说渲染出一组学生的姓名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;names&#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;!--默认下标索引名index，默认当前项名item--&gt;</span><br><span class="line">  &lt;text&gt;&#123;&#123;index&#125;&#125;&#123;item.name&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    names:[</span><br><span class="line">      &#123;name:&quot;张三&quot;&#125;,</span><br><span class="line">      &#123;name:&quot;李四&quot;&#125;,</span><br><span class="line">      &#123;name:&quot;王五&quot;&#125;,</span><br><span class="line">      &#123;name:&quot;赵六&quot;&#125;</span><br><span class="line">    ],</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line">      &lt;!--</span><br><span class="line">        在界面上显示：</span><br><span class="line">        0张三</span><br><span class="line">        1李四</span><br><span class="line">        2王五</span><br><span class="line">        3赵六</span><br><span class="line">      --&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>使用 wx:for-item 指定数组当前元素的变量名，使用 wx:for-index 指定数组当前下标的变量名：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;names&#125;&#125;&quot; wx:for-item=&quot;n&quot; wx:for-index=&quot;i&quot;&gt;</span><br><span class="line">  &lt;text&gt;&#123;&#123;i&#125;&#125;&#123;&#123;n.name&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 微信小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序-WXML特性之数据绑定]]></title>
      <url>/2019/04/07/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F03-WXML%E7%89%B9%E6%80%A7%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
      <content type="html"><![CDATA[<p>在对用户呈现的界面中，用户所看到的内容往往会随着操作的数据不同而不同，这就要求界面呈现给用户的东西要动态变化，界面要随着用户的操作动态渲染，这就要求我们要有动态去改变界面的能力。在小程序中，通过WXML的数据绑定功能可以动态的渲染界面。<br><a id="more"></a></p>
<h4 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h4><p>页面上的动态数据都来自于对应页面JS文件中Page()函数的data对象,而我们绑定数据用的是mustache语法:<strong></strong>，通过这样的方式就可以取到对应变量的值。<br>wxml可以绑定文本、数字、布尔等类型的值<br>例如:在index.wxml和index.js中加入如下代码，我们依然可以在界面中显示hello world，当message对应的变量值改变的时候，界面上呈现的值也会随之改变：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/wxml/index.wxml--&gt;</span><br><span class="line">&lt;text&gt;信息：&#123;&#123;message&#125;&#125;&lt;/text&gt;</span><br><span class="line"></span><br><span class="line">// pages/wxml/index.js</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">   message:&quot;hello world&quot;</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line">      &lt;!-- 输出 hello world --&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="绑定标签属性值"><a href="#绑定标签属性值" class="headerlink" title="绑定标签属性值"></a>绑定标签属性值</h4><p>wxml不仅可以绑定文本的值，还可以动态绑定标签的属性值<br>例如：我们自定义一个属性data-name为它绑定值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/wxml/index.wxml--&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;text data-name=&quot;&#123;&#123;dataName&#125;&#125;&quot;&gt;&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">// pages/wxml/index.js</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">   dataName:&quot;jason&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p><em>这里特别注意我们所有的属性和组件都要求用小写</em>  </p>
<h4 id="逻辑语法"><a href="#逻辑语法" class="headerlink" title="逻辑语法"></a>逻辑语法</h4><p><strong>三元运算</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/wxml/index.wxml--&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;text&gt;&#123;&#123;a&gt;1 ? &quot;a大于1&quot; : &quot;a小于1&quot;&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">// pages/wxml/index.js</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">  a:3</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    &lt;!-- 输出 a大于1 --&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>算术运算</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/wxml/index.wxml--&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;text&gt;&#123;&#123;a+b&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">// pages/wxml/index.js</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">  a:3,</span><br><span class="line">  b:2</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">      &lt;!-- 输出 5 --&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>字符串拼接</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/wxml/index.wxml--&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;text&gt;&#123;&#123;msg+&quot; world&quot;&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">// pages/wxml/index.js</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg:&quot;hello&quot;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">     &lt;!-- 输出 hello world --&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 微信小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序-开发框架组成]]></title>
      <url>/2019/04/02/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F02-%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E7%BB%84%E6%88%90/</url>
      <content type="html"><![CDATA[<h2 id="小程序代码组成"><a href="#小程序代码组成" class="headerlink" title="小程序代码组成"></a>小程序代码组成</h2><p>在我们新建好一个小程序项目后，开发工具帮我们把基本的结构目录搭建好了，我们不难发现，在每一个文件夹下面都有四个文件，每一个页面都对应着四个文件<br><img src="http://wx1.sinaimg.cn/mw690/007HSgDpgy1g1oo9naxkyj308307ia9y.jpg" alt>  </p>
<p>这些文件就是小程序的组成元素,小程序由 配置代码JSON文件、模板代码 WXML 文件、样式代码 WXSS文件以及逻辑代码 JavaScript文件组成。每一个文件都发挥着各自的作用，下面来详细介绍每一个文件所扮演的角色。  </p>
<h2 id="一、WXML-模板"><a href="#一、WXML-模板" class="headerlink" title="一、WXML 模板"></a>一、WXML 模板</h2><p>WXML 全称是 WeiXin Markup Language，是小程序框架设计的一套标签语言，结合小程序的各种组件渲染出页面的结构。<strong>语法和HTML类似</strong>，有过HTML开发经验应该可以很快上手，它也是通过标签来渲染视图的，基本语法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在此处写注释 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;标签名 属性名1=&quot;属性值1&quot; 属性名2=&quot;属性值2&quot; ...&gt; ...&lt;/标签名&gt;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>标签拥有一些共同属性  </li>
</ul>
<table>
<thead>
<tr>
<th>属性名</th>
<th>类型</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>String</td>
<td>组件的唯一标识</td>
<td>在整个页面唯一</td>
</tr>
<tr>
<td>class</td>
<td>String</td>
<td>组件的样式类</td>
<td>在对应的 WXSS 中定义的样式类</td>
</tr>
<tr>
<td>style</td>
<td>String</td>
<td>组件的内联样式</td>
<td>可以动态设置的内联样式</td>
</tr>
<tr>
<td>hidden</td>
<td>Boolean</td>
<td>组件是否显示</td>
<td>所有组件默认显示</td>
</tr>
<tr>
<td>data-*</td>
<td>Any</td>
<td>自定义属性</td>
<td>组件上触发的事件时，会发送给事件处理函数</td>
</tr>
<tr>
<td>bind<em>/catch</em></td>
<td>EventHandler</td>
<td>组件的事件</td>
<td></td>
</tr>
</tbody>
</table>
<a id="more"></a>
<ul>
<li>标签自定义属性  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view test-data-name=&quot;hello&quot;&gt; &lt;/view&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>我们为view标签自定义了一个test-data-name的属性，它的值为hello  </p>
<ul>
<li>注意事项  </li>
</ul>
<p>​一个完整的 WXML语句由一段开始标签和一段结束标签组成，WXML 要求标签必须是严格闭合的，没有闭合将会导致编译错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">text 没有闭合，导致编译错误：</span><br><span class="line">expect end-tag `text`., near `view`</span><br><span class="line">    |   &lt;view&gt;</span><br><span class="line">    |     &lt;text&gt;hello world</span><br><span class="line">    |   &lt;/view&gt;</span><br><span class="line">    |    ^</span><br><span class="line">    | &lt;/view&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="二、WXSS-样式"><a href="#二、WXSS-样式" class="headerlink" title="二、WXSS 样式"></a>二、WXSS 样式</h2><p>WXSS（WeiXin Style Sheets）是一套用于小程序的样式语言，用于描述WXML的组件样式，也就是视觉上的效果。WXSS与Web开发中的CSS类似。为了更适合小程序开发，WXSS对CSS做了一些补充以及修改。熟悉web开发的朋友对WXSS也应该很快就上手。  </p>
<ul>
<li><p>项目公共样式<br><img src="http://wx3.sinaimg.cn/mw690/007HSgDpgy1g1qlbfsuawj30d7065q2z.jpg" alt><br>在项目根目录下，可以看到一个app.wxss文件，这个文件为项目公共样式，在这个页面里面写的样式会被注入到小程序的每个页面，对其每一个页面都生效。  </p>
</li>
<li><p>其他样式<br><img src="http://wx3.sinaimg.cn/mw690/007HSgDpgy1g1qlbj7ud8j307s09l3yi.jpg" alt><br>每个页面对应的样式文件，也可以被其它样式或公共样式引用  </p>
</li>
</ul>
<h2 id="三、JavaScript-脚本"><a href="#三、JavaScript-脚本" class="headerlink" title="三、JavaScript 脚本"></a>三、JavaScript 脚本</h2><p>小程序的主要开发语言是 JavaScript ，开发者使用 JavaScript 来开发业务逻辑以及调用小程序的 API 来完成业务需求。  </p>
<h2 id="四、JSON-配置文件"><a href="#四、JSON-配置文件" class="headerlink" title="四、JSON 配置文件"></a>四、JSON 配置文件</h2><p>JSON(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式，它不是一种编程语言，它在小程序中扮演着静态配置的作用，简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。  </p>
<p> Json文件同样分为两种:<strong>1.全局Json配置文件 2、单一页面Json配置文件</strong>。全局Json配置文件在项目根目录下，单一页面的Json配置文件在每个页面文件夹下。  </p>
<p> 我们可以更改全局Json配置文件，改变界面的总体设置<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  &quot;pages&quot;:[</span><br><span class="line">    &quot;pages/index/index&quot;,</span><br><span class="line">    &quot;pages/logs/logs&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;window&quot;:&#123;</span><br><span class="line">    &quot;backgroundTextStyle&quot;:&quot;light&quot;,</span><br><span class="line">    &quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;,</span><br><span class="line">    &quot;navigationBarTitleText&quot;: &quot;WeChat&quot;,</span><br><span class="line">    &quot;navigationBarTextStyle&quot;:&quot;black&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>尝试更改项目启动的默认页面：<br>项目中的所有页面都要在”pages”中注册<br>在pages数组中，放在第一个位置的页面会被默认加载<br>所以我们启动小程序默认是显示pages/index/index的页面<br>可以更改顺序，把”pages/logs/logs”放到”pages/index/index”前面，改变默认加载log页面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;pages&quot;:[</span><br><span class="line">   &quot;pages/logs/logs&quot;,</span><br><span class="line">   &quot;pages/index/index&quot;</span><br><span class="line"> ],</span><br></pre></td></tr></table></figure></p>
<p>也可以尝试更改界面配置参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&quot;window&quot;:&#123;</span><br><span class="line">  //动态设置下拉背景字体、loading 图的样式,仅支持dark和light</span><br><span class="line">  &quot;backgroundTextStyle&quot;:&quot;light&quot;,</span><br><span class="line"></span><br><span class="line">  //设置导航栏的背景颜色</span><br><span class="line">  &quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;,</span><br><span class="line"></span><br><span class="line">  //设置导航栏的文字</span><br><span class="line">  &quot;navigationBarTitleText&quot;: &quot;WeChat&quot;,</span><br><span class="line"></span><br><span class="line">  //设置导航栏的字体颜色，仅支持black和write</span><br><span class="line">  &quot;navigationBarTextStyle&quot;:&quot;black&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>特别注意：JSON配置文件中不能使用注释，否则会报错!</strong>  </p>
<h3 id="JSON语法"><a href="#JSON语法" class="headerlink" title="JSON语法"></a>JSON语法</h3><p>相比于XML ，JSON格式最大的优点是易于人的阅读和编写，通常不需要特殊的工具，就能读懂和修改，是一种轻量级的数据交换格式。</p>
<p>JSON文件都是被包裹在一个大括号中 {}，通过key-value的方式来表达数据。一般形式为 <strong>键:值</strong>  </p>
<p>JSON 语法是 JavaScript 对象表示语法的子集。</p>
<ul>
<li>数据在名称/值对中</li>
<li>数据由逗号分隔</li>
<li>大括号保存对象</li>
<li>中括号保存数组  </li>
</ul>
<p>JSON 值可以是：</p>
<ul>
<li>数字（整数或浮点数）</li>
<li>字符串（在双引号中）</li>
<li>逻辑值（true 或 false）</li>
<li>数组（在中括号中）</li>
<li>对象（在大括号中）</li>
<li>null  </li>
</ul>
<h3 id="JSON-数字"><a href="#JSON-数字" class="headerlink" title="JSON 数字"></a>JSON 数字</h3><p>JSON 数字可以是整型或者浮点型：<br>存储年龄为30:<br><code>{ &quot;age&quot;:30 }</code></p>
<h3 id="JSON-对象"><a href="#JSON-对象" class="headerlink" title="JSON 对象"></a>JSON 对象</h3><p>JSON 对象在大括号（{}）中书写：<br>对象可以包含多个名称/值对：<br>存储小明这个对象:<br><code>{ &quot;name&quot;:&quot;小明&quot; , &quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;}</code></p>
<h3 id="JSON-数组"><a href="#JSON-数组" class="headerlink" title="JSON 数组"></a>JSON 数组</h3><p>JSON 数组在中括号中书写：<br>数组可包含多个<strong>对象</strong>：<br>存储三个学生的信息：  </p>
<pre><code class="json">{
<span class="attr">"student"</span>: [
{ <span class="attr">"name"</span>:<span class="string">"小明"</span> , <span class="attr">"age"</span>:<span class="number">18</span> },
{ <span class="attr">"name"</span>:<span class="string">"小王"</span> , <span class="attr">"age"</span>:<span class="number">20</span> },
{ <span class="attr">"name"</span>:<span class="string">"小小李"</span> , <span class="attr">"age"</span>:<span class="number">19</span> }
]
}
</code></pre>
<h3 id="JSON-布尔值"><a href="#JSON-布尔值" class="headerlink" title="JSON 布尔值"></a>JSON 布尔值</h3><p>JSON 布尔值可以是 true 或者 false：<code>{ &quot;flag&quot;:true }</code>  </p>
<h3 id="JSON-null"><a href="#JSON-null" class="headerlink" title="JSON null"></a>JSON null</h3><p>JSON 可以设置 null 值：<code>address:null</code></p>
<p>如果对json语法陌生的，请先学习json语法！</p>
]]></content>
      
        <categories>
            
            <category> 微信小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序之Hello World]]></title>
      <url>/2019/04/01/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F01-hello%20world/</url>
      <content type="html"><![CDATA[<h2 id="开发前的准备"><a href="#开发前的准备" class="headerlink" title="开发前的准备"></a>开发前的准备</h2><ol>
<li>前往微信公众平台注册AppId( <a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">https://mp.weixin.qq.com/</a>)  </li>
</ol>
<p><img src="http://wx4.sinaimg.cn/mw690/007HSgDpgy1g1om3x96ioj30mg0gtq9w.jpg" alt><br><a id="more"></a></p>
<p>填写邮箱等相关信息注册小程序<br><img src="http://wx3.sinaimg.cn/mw690/007HSgDpgy1g1om0o6lhcj30j10gddg9.jpg" alt>  </p>
<p>注册成功之后用微信关联登录，便可进入小程序的后台管理界面，在开发-开发设置-开发者ID中可以看到AppID(小程序ID),注册完成之后下载开发工具<br><img src="http://wx4.sinaimg.cn/mw690/007HSgDpgy1g1omi5p9poj310s0hg0ti.jpg" alt></p>
<ol>
<li><p>开发工具下载（<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html" target="_blank" rel="noopener">点击这里下载</a>）  </p>
</li>
<li><p>新建项目<br>安装好微信Web开发工具，新建一个小程序的项目，填写项目名称选择路径之后填写AppID，这里不使用云服务进行开发<br><img src="http://wx4.sinaimg.cn/mw690/007HSgDpgy1g1omzgnlr6j30mn0fezl4.jpg" alt>  </p>
</li>
</ol>
<p>新建完之后，小程序已经把基本的项目结构给我们搭建好了，我们可以可以找到项目路径下pages/index/index.wxml页面更改相应的代码，就可以在左边模拟器屏幕上显示hello world<br><img src="http://wx3.sinaimg.cn/mw690/007HSgDpgy1g1on99seg3j30us0j9dhq.jpg" alt>  </p>
<p>也可以通过真机调试的功能，编译出一个二维码，用手机微信扫码之后在真机上看界面详情<br><img src="http://wx2.sinaimg.cn/mw690/007HSgDpgy1g1ondkeyodj30m50ckabg.jpg" alt><br>至此，一个简单的hello world程序就写好了！</p>
]]></content>
      
        <categories>
            
            <category> 微信小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Layui带搜索的下拉框]]></title>
      <url>/2018/04/03/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88_springboot%E4%B8%AD%E9%81%BF%E5%85%8DThymeleaf%E5%AF%B9html%E8%AF%AD%E6%B3%95%E6%A3%80%E6%9F%A5%E8%BF%87%E4%B8%A5/</url>
      <content type="html"><![CDATA[<p>js代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--layui表单模块加载   带搜索的下拉框--&gt;</span><br><span class="line">layui.use(<span class="string">'form'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> form = layui.form;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>html代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-form-item"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-inline"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"layui-form-label"</span>&gt;</span>搜索选择框<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-input-inline"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-form"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"layui-input"</span> <span class="attr">name</span>=<span class="string">"modules"</span> <span class="attr">lay-verify</span>=<span class="string">"required"</span> <span class="attr">lay-search</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>直接选择或搜索选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"5"</span>&gt;</span>南京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"6"</span>&gt;</span>昆明<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"7"</span>&gt;</span>昆山<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"8"</span>&gt;</span>广上<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>从后台查询到页面的列表下拉，比如下拉框是考试地点列表，thymeleaf写法:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>考试地点：<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;input name="exam_room_id" type="text" class="form-control" th:value="$&#123;examInfo.examRoomId&#125;" placeholder="请选择考试地点" /&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-inline"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-form"</span> <span class="attr">style</span>=<span class="string">"width:471px;"</span> &gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">select</span>  <span class="attr">lay-filter</span>=<span class="string">"examRoom"</span> <span class="attr">class</span>=<span class="string">"layui-input"</span> <span class="attr">name</span>=<span class="string">"examRoomId"</span> <span class="attr">lay-verify</span>=<span class="string">"required"</span> <span class="attr">lay-search</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>直接选择或搜索选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">th:each</span>=<span class="string">"examRoom,examRoomList:$&#123;examRoomList&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;examRoom.id&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;examRoom.examAddress&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 解决方案 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[github设置ssh key后push还要输入用户名和密码解决方案]]></title>
      <url>/2018/04/02/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88_github%E8%AE%BE%E7%BD%AEssh%20key%E5%90%8Epush%E8%BF%98%E8%A6%81%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h2 id="github设置ssh-key后push还要输入用户名和密码解决方案"><a href="#github设置ssh-key后push还要输入用户名和密码解决方案" class="headerlink" title="github设置ssh key后push还要输入用户名和密码解决方案"></a>github设置ssh key后push还要输入用户名和密码解决方案</h2><p>因为用的push方式是https而不是ssh，更新origin为ssh格式  </p>
<p>HTTPS的格式为：<a href="https://github.com/用户名/仓库名.git" target="_blank" rel="noopener">https://github.com/用户名/仓库名.git</a>  </p>
<p>SSH的格式为：git@github.com:用户名/仓库名.git<br>在github.com上 建立了一个小项目，可是在每次push  的时候，都要输入用户名和密码，很是麻烦</p>
<p>原因是使用了https方式 push</p>
<p>在termail里边 输入  Git remote -v</p>
<p>可以看到形如一下的返回结果</p>
<p>origin <a href="https://github.com/xxx/demo.git" target="_blank" rel="noopener">https://github.com/xxx/demo.git</a> (fetch)</p>
<p>origin <a href="https://github.com/xxx/demo.git" target="_blank" rel="noopener">https://github.com/xxx/demo.git</a> (push)</p>
<p>下面把它换成ssh方式的。</p>
<ol>
<li>git remote rm origin</li>
<li>git remote add origin git@github.com:xxx/demo.git</li>
<li>git push origin (另一种方法是：git push -u origin master。同样根据自己的需要，替换origin和master。)</li>
</ol>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 解决方案 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Thymeleaf热部署,更改页面不重启]]></title>
      <url>/2018/03/06/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88_Thymeleaf%E7%83%AD%E9%83%A8%E7%BD%B2,%E6%9B%B4%E6%94%B9%E9%A1%B5%E9%9D%A2%E4%B8%8D%E9%87%8D%E5%90%AF/</url>
      <content type="html"><![CDATA[<p>1、修改pom文件，添加依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>2、配置文件加入如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.thymeleaf.cache=false</span><br><span class="line">spring.thymeleaf.mode=HTML5</span><br></pre></td></tr></table></figure></p>
<p>第一行配置是清除缓存，实现热部署。加上之后就能实现不重新启动服务器刷新页面看到更改效果。修改完html后一定要<strong>ctrl+f9</strong>重新build一下再到页面刷新，否则不会生效！<br>第二行配置是回避HTML进行严格的检查的配置。</p>
]]></content>
      
        <categories>
            
            <category> thymeleaf </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 解决方案 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot之@SpringBootApplication注解]]></title>
      <url>/2018/03/02/springboot_@SpringBootApplication%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>下面是我们经常见到SpringBoot启动类代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">　　<span class="meta">@Override</span></span><br><span class="line">　　<span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">　　　　<span class="keyword">return</span> application.sources(DemoApplication.class);</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">　　　　SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里主要关注@SpringBootApplication注解，它包括三个注解：</p>
<p>@Configuration：表示将该类作用springboot配置文件类。</p>
<p>@EnableAutoConfiguration:表示程序启动时，自动加载springboot默认的配置。</p>
<p>@ComponentScan:表示程序启动是，自动扫描当前包及子包下所有类。</p>
]]></content>
      
        <categories>
            
            <category> springboot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 解决方案 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HDFS的JAVA客户端编写]]></title>
      <url>/2018/01/04/04_hdfs%E7%9A%84java%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%96%E5%86%99/</url>
      <content type="html"><![CDATA[<h1 id="HDFS的JAVA客户端编写"><a href="#HDFS的JAVA客户端编写" class="headerlink" title="HDFS的JAVA客户端编写"></a>HDFS的JAVA客户端编写</h1><p>之前一直使用 HDFS Shell 命令来完成对 HDFS 的操作，当然也可以使用 Java 来对 HDFS 实现操作。<br>接下来通过一些例子来看一下 JAVA 是如何对 HDFS 实现操作的。  </p>
<h3 id="在eclipse中新建一个java项目"><a href="#在eclipse中新建一个java项目" class="headerlink" title="在eclipse中新建一个java项目"></a>在eclipse中新建一个java项目</h3><p>将Linux中hadoop安装目录下，配置好的<code>core-site.xml</code> <code>hdfs-site.xml</code>，mapred-site.xml，yarn-site.xml都拷贝到eclipse工作空间<br><img src="http://wx2.sinaimg.cn/large/005TBZ5oly1fo4ufraku9j309c05t0sq.jpg" alt><br><a id="more"></a><br>要对hdfs进行操作，需要两个核心jar包，这两个jar包可以在hadoop安装包中找到（hadoop-x.x.x\share\hadoop），导入这两个文件夹中对应的jar包以及他们的依赖包(在这两个目录下面的lib文件夹中)<br><img src="http://wx4.sinaimg.cn/large/005TBZ5oly1fo9isn3lvqj304m01b0s3.jpg" alt><br>将这两个jar包导入到项目中<br><img src="http://wx1.sinaimg.cn/large/005TBZ5oly1fo4uamux7xj30r90fn75r.jpg" alt></p>
<p>或通过maven，添加相应版本的依赖</p>
<p>pom.xml中加入这两个依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hadoop hdfs类库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hadoop 公共类库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="访问HDFS的两种方式"><a href="#访问HDFS的两种方式" class="headerlink" title="访问HDFS的两种方式"></a>访问HDFS的两种方式</h3><p>访问 HDFS 的核心类是<strong>FileSystem</strong>，<strong>FileSystem</strong> 是文件系统的抽象，HDFS是分布式文件系统对 <strong>FileSystem</strong> 的实现，<strong>FileSystem</strong> 有很多文件系统的实现，不论底层文件系统的具体实现是什么样的，文件系统 <strong>FileSystem</strong> 统一提供了访问接口，直接通过 <strong>FileSystem</strong> 来进行操作，如此即可解耦合。<br>如下是 <strong>FileSystem</strong> 的继承关系：  </p>
<p><img src="http://wx3.sinaimg.cn/large/005TBZ5oly1fo8d68895jj30jj0e9t9k.jpg" alt></p>
<p><strong>通过FileSystem访问HDFS</strong></p>
<ol>
<li><p>设置默认配置文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方式1：</span></span><br><span class="line"><span class="comment">默认读取classpath下的xxx.site.xml配置文件，并解析其内容，封装到conf对象中。</span></span><br><span class="line"><span class="comment">设置默认文件系统、设置run Configuration的参数: -DHADOOP_USER_NAME=hadoop  </span></span><br><span class="line"><span class="comment">*/</span>   </span><br><span class="line">FileSystem fs = <span class="keyword">null</span>;</span><br><span class="line">Configuration conf = <span class="keyword">new</span> Configuration();      </span><br><span class="line">fs = FileSystem.get(conf);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在构造函数中设置配置信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方式2:在此方法的参数中设置默认文件系统、用户名</span></span><br><span class="line"><span class="comment">根据配置信息，去获取一个具体文件系统的客户端操作实例对象</span></span><br><span class="line"><span class="comment">会覆盖掉配置文件中读取的值</span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line">FileSystem fs = <span class="keyword">null</span>;</span><br><span class="line">Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://master:9000/"</span>);</span><br><span class="line">fs = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">"hdfs://master:9000/"</span>), conf, <span class="string">"hadoop"</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="FileSystem操作实例"><a href="#FileSystem操作实例" class="headerlink" title="FileSystem操作实例"></a>FileSystem操作实例</h3><p>项目新建完成，先来测试从hdfs上下载文件，从hdfs中将 jdk-7u65-linux-i586.tar.gz 下载到本地<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.zqinsheng.hdfs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HdfsUtil</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//hdfs的配置信息,上述的两种配置方式,这里采用第一种</span></span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		<span class="comment">//根据配置信息，去获取一个具体文件系统的客户端操作实例</span></span><br><span class="line">		FileSystem fs = FileSystem.get(conf);</span><br><span class="line">		<span class="comment">//hdfs文件存放的路径</span></span><br><span class="line">		Path path = <span class="keyword">new</span> Path(<span class="string">"hdfs://master:9000/jdk-7u65-linux-i586.tar.gz"</span>);</span><br><span class="line">		<span class="comment">//通过一个输入流获取将要下载的文件</span></span><br><span class="line">		FSDataInputStream is = fs.open(path);</span><br><span class="line">		<span class="comment">//通过一个输出流指定下载到哪</span></span><br><span class="line">		FileOutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">"h:\\download.jar"</span>);</span><br><span class="line">		<span class="comment">//commons包中提供的工具类,将一个输入流拷贝到输出流中</span></span><br><span class="line">		IOUtils.copy(is, out);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>也许会出现这样的错误，原因是java不认识hdfs://这样的路径，本地文件系统不知道这是什么路径，一般都是<strong>配置文件</strong>的问题，请检查是否将 <code>core-site.xml、hdfs-site.xml</code>文件拷贝到src目录下，或是检查配置参数。<br><img src="http://wx2.sinaimg.cn/large/005TBZ5oly1fo4swh96k2j30zq07xq3w.jpg" alt>   </p>
<p>或者是这样的错误，权限被拒绝，原因还是在windows中我们的用户不是hdfs所指定的用户，如果在Linux中使用eclipse则不会出现这样的情况。</p>
<p><img src="http://wx2.sinaimg.cn/large/005TBZ5oly1fo5xyyhyvgj30zf0fnjt1.jpg" alt></p>
<p>解决办法：</p>
<ul>
<li><p>可以在run as-&gt;run<br>configuration-&gt;arguments里面添加-DHADOOP_USER_NAME=用户名  </p>
</li>
<li><p>或者是通过FileSystem.get()进行user的指定，fs = FileSystem.get(new URI(“hdfs://master:9000/“), conf, “hadoop”);</p>
</li>
</ul>
<p>上面的下载文件是一种相对底层的写法，<strong>FileSystem</strong> 已经帮我们将这些操作封装好了，我们直接调用这些方法即可完成相对应的操作。通过一个<strong>Unit</strong>测试代码来看一下封装好的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.zqinsheng.hdfs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.LocatedFileStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.RemoteIterator;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHdfs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	FileSystem fs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 每次执行方法前都获取FileSystem实例对象</span></span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException, Exception, Exception </span>&#123;</span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		fs = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">"hdfs://master:9000"</span>), conf, <span class="string">"hadoop"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 上传文件</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">()</span> <span class="keyword">throws</span> Exception, IOException </span>&#123;</span><br><span class="line">		fs.copyFromLocalFile(<span class="keyword">new</span> Path(<span class="string">"f://HelloWorld.txt"</span>), <span class="keyword">new</span> Path(<span class="string">"hdfs://master:9000/testHdfs"</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 下载文件</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * 如果报空指针异常</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * 解决方法:将fs.copyToLocalFile(hdfsPath,localPath);</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * 改为fs.copyToLocalFile(false,hdfsPath,localPath,true);</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">()</span> <span class="keyword">throws</span> Exception, IOException </span>&#123;</span><br><span class="line">		fs.copyToLocalFile(<span class="keyword">new</span> Path(<span class="string">"hdfs://master:9000/testHdfs/HelloWorld.txt"</span>), <span class="keyword">new</span> Path(<span class="string">"h:/HelloWorld.txt"</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 创建文件夹</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mkdir</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, IOException </span>&#123;</span><br><span class="line">		fs.mkdirs(<span class="keyword">new</span> Path(<span class="string">"hdfs://master:9000/aa/bb/cc"</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除文件或文件夹</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, IOException </span>&#123;</span><br><span class="line">		fs.delete(<span class="keyword">new</span> Path(<span class="string">"hdfs://master:9000/aa"</span>),<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 查询指定目录下的文件，不包括文件夹，包括子文件夹下的文件</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> FileNotFoundException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listFile</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IllegalArgumentException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//获取到文件状态的迭代器,true表示递归遍历</span></span><br><span class="line">		RemoteIterator&lt;LocatedFileStatus&gt; files = fs.listFiles(<span class="keyword">new</span> Path(<span class="string">"hdfs://master:9000/"</span>),<span class="keyword">true</span>);</span><br><span class="line">		<span class="comment">//遍历迭代器</span></span><br><span class="line">		<span class="keyword">while</span>(files.hasNext()) &#123;</span><br><span class="line">			<span class="comment">//得到每个文件状态</span></span><br><span class="line">			LocatedFileStatus file = files.next();</span><br><span class="line">			<span class="comment">//拿到LocatedFileStatus对象后，可以通过这个对象获取文件的名称、路径、块大小、权限、所属者等等信息</span></span><br><span class="line">			String name = file.getPath().getName();</span><br><span class="line">			System.out.println(name);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 查询指定目录下的文件和文件夹</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> FileNotFoundException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listFileAndDir</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IllegalArgumentException, Exception </span>&#123;</span><br><span class="line">		<span class="comment">//列出文件或文件夹信息，不提供递归遍历</span></span><br><span class="line">		<span class="comment">//得到文件的状态</span></span><br><span class="line">		FileStatus[] listStatus = fs.listStatus(<span class="keyword">new</span> Path(<span class="string">"hdfs://master:9000/"</span>));</span><br><span class="line">		<span class="keyword">for</span>(FileStatus fileStatus:listStatus) &#123;</span><br><span class="line">			<span class="comment">//获取文件名称</span></span><br><span class="line">			String name = fileStatus.getPath().getName();</span><br><span class="line">			System.out.println(name);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> hadoop </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hadoop RPC实现机制]]></title>
      <url>/2018/01/04/05_Hadoop%20RPC%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h1 id="Hadoop-RPC实现机制"><a href="#Hadoop-RPC实现机制" class="headerlink" title="Hadoop RPC实现机制"></a>Hadoop RPC实现机制</h1><h2 id="一、RPC基础概念"><a href="#一、RPC基础概念" class="headerlink" title="一、RPC基础概念"></a>一、RPC基础概念</h2><p>RPC 是Remote Procedure Call（远程过程调用）的简写，是一种通过网络从远程计算机上请求服务的机制，封装了具体实现，使用户不需要了解底层网络技术。<br>RPC采用客户机/服务器模式,主要应用于一些分布式的系统，客户机上的一个请求程序,调用进程发送一个有进程参数的调用信息到服务进程，然后等待应答信息。在服务器端，进程保持睡眠状态直到调用信息的到达为止。当一个调用信息到达，服务器获得进程参数，根据参数作出答复，发送答复信息，然后等待下一个调用信息，最后，客户端调用进程接收答复信息，获得进程结果，然后调用执行继续进行。用简单的话说，就是一台计算机程序远程调用另外一台计算机的程序。<br>RPC对于我们来说是透明的，在调用的过程中感觉不到其间涉及跨机器间的通信，而是感觉像是在执行一个本地调用。我们不用去关心底层的网络通信细节，这是RPC中的访问透明性。  </p>
<p><img src="http://wx3.sinaimg.cn/large/005TBZ5oly1fo8cmi1hldj30kx0beq4i.jpg" alt></p>
<a id="more"></a>
<ol>
<li>通信模块：客户端与服务的的请求应答消息，TCP/IP的socket机制</li>
<li>stub程序：代理程序，为了保证RPC的透明性，它在客户端表现的就像调用本地程序一样，客户端发送请求参数之后，服务器端stub程序会解码对应结果、调用相应的服务过程返回结果给服务端。</li>
<li>客户端/服务端过程：即请求的发出者与请求的处理者</li>
<li>调度程序：调度程序接受来自通信模块的请求消息，并根据其中的标识选择一个Stub程序进行处理。</li>
</ol>
<h2 id="二、Hadoop中RPC的Demo"><a href="#二、Hadoop中RPC的Demo" class="headerlink" title="二、Hadoop中RPC的Demo"></a>二、Hadoop中RPC的Demo</h2><p>hadoop 的 common 包中包含有 RPC 的包，有了这个 RPC 的包才能进行 RPC 操作，通过一个demo程序来感受一下RPC。<br>模拟用户登陆成功：从客户端调用远程服务端的登陆方法，登陆成功并返回登陆结果。</p>
<table>
<thead>
<tr>
<th></th>
<th>客户端</th>
<th>服务端</th>
</tr>
</thead>
<tbody>
<tr>
<td>环境</td>
<td>win10/eclipse</td>
<td>centerOS/eclipse</td>
</tr>
<tr>
<td>网络配置</td>
<td>暂时用不到</td>
<td>主机名：master(192.168.2.100)</td>
</tr>
<tr>
<td>项目详情</td>
<td><img src="http://wx1.sinaimg.cn/large/005TBZ5oly1fobqv7gk48j306r043a9y.jpg" alt></td>
<td><img src="http://wx4.sinaimg.cn/large/005TBZ5oly1fobqq0xd7bj308w05cweg.jpg" alt></td>
</tr>
</tbody>
</table>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p><strong> 1.定义一个LoginService协议接口 </strong><br>RPC通信是通过 client 和 server 之间的接口通信，定义 server 对外服务的接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginService</span> </span>&#123;</span><br><span class="line">  <span class="comment">//定义协议版本号，通过这个版本号来确认client和server之间的通信，不同版本号之间不能相互通信</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> versionID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong> 2.定义LoginService的实现：LoginServiceImpl </strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title">LoginService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> username+<span class="string">" is login !"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong> 3.构造并启动RPC server </strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Start</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> HadoopIllegalArgumentException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//创建RPC.Builder实例，设置一些必要的参数</span></span><br><span class="line">		Builder builder = <span class="keyword">new</span> RPC.Builder(<span class="keyword">new</span> Configuration());</span><br><span class="line">    <span class="comment">//设置主机名</span></span><br><span class="line">		builder.setBindAddress(<span class="string">"master"</span>);</span><br><span class="line">    <span class="comment">//设置端口号</span></span><br><span class="line">    builder.setPort(<span class="number">6666</span>);</span><br><span class="line">    <span class="comment">//协议接口</span></span><br><span class="line">    builder.setProtocol(LoginService.class);</span><br><span class="line">    <span class="comment">//业务逻辑实例</span></span><br><span class="line">    builder.setInstance(<span class="keyword">new</span> LoginServiceImpl());</span><br><span class="line">		<span class="comment">//构造RPC Server实例</span></span><br><span class="line">		Server server = builder.build();</span><br><span class="line">    <span class="comment">//启动服务，处于监听状态</span></span><br><span class="line">    server.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p><strong> 1.将服务端的 LoginService 协议接口拷贝到客户端中 </strong></p>
<p><img src="http://wx1.sinaimg.cn/large/005TBZ5oly1fobqv7gk48j306r043a9y.jpg" alt></p>
<p>注意客户端中的 LoginService 同样需要定义协议版本号并与服务端保持一致</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> versionID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong> 2.调用服务端的login方法 </strong></p>
<p>客户端代码的核心在于RPC.getProxy()，它可以返回一个代理对象，这个代码对象就是服务器端对象的代理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      通过RPC拿到代理对象</span></span><br><span class="line"><span class="comment">      RPC.getProxy(协议接口, 版本号, 通信地址:主机名，端口号 , 配置信息);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">		LoginService proxy = RPC.getProxy(LoginService.class, <span class="number">1L</span>, <span class="keyword">new</span> InetSocketAddress(<span class="string">"master"</span>, <span class="number">6666</span>), <span class="keyword">new</span> Configuration());</span><br><span class="line">    <span class="comment">//调用login方法,就像调用本地方法一样</span></span><br><span class="line">		String loginUser = proxy.login(<span class="string">"JasonZhou"</span>);</span><br><span class="line">		System.out.println(loginUser);</span><br><span class="line">    <span class="comment">//关闭连接</span></span><br><span class="line">    RPC.stopProxy(proxy);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行成功，在控制台看到输出信息，调用远程方法成功 ！<br><code>JasonZhou is login !</code></p>
<p>整个过程如下图所示<br><img src="http://wx1.sinaimg.cn/large/005TBZ5oly1fobst8xn04j31kw0qgqv5.jpg" alt></p>
]]></content>
      
        <categories>
            
            <category> hadoop </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hdfs&mapreduce测试之wordCount]]></title>
      <url>/2018/01/03/03_hdfs&amp;mapreduce%E6%B5%8B%E8%AF%95%E4%B9%8BwordCount/</url>
      <content type="html"><![CDATA[<h1 id="hdfs-amp-mapreduce测试之wordCount"><a href="#hdfs-amp-mapreduce测试之wordCount" class="headerlink" title="hdfs&amp;mapreduce测试之wordCount"></a>hdfs&amp;mapreduce测试之wordCount</h1><p>环境搭建完成，hadoop正常启动。按照国际惯例，通常我们在学习一门语言的时候，写的第一个程序就是Hello World。而在学习Hadoop时，我们要写的第一个Hello World级别的程序就是词频统计WordCount！</p>
<h2 id="一、测试HDFS"><a href="#一、测试HDFS" class="headerlink" title="一、测试HDFS"></a>一、测试HDFS</h2><p>hadoop启动成功后，首先通过<code>http://主机地址:50070</code>到web界面，查看一下HDFS中的文件，找到菜单栏 Browse the file system<br><img src="http://wx2.sinaimg.cn/large/005TBZ5oly1fnnk2dnae9j30mw0363ye.jpg" alt>  </p>
<p>进入之后，可以看到根目录 / 下面没任何文件，可以通过<code>hadoop fs -put &lt;linux上的文件&gt; &lt;hdfs上的路径&gt;</code>上传一个文件到hdfs文件系统中，这里先上传一个文件感受一下。  </p>
<p>上传jdk到hdfs根目录下<code>hadoop fs -put jdk-7u65-linux-i586.tar.gz hdfs://master:9000/</code><br><img src="http://wx4.sinaimg.cn/large/005TBZ5oly1fnnleok1cjj311u09adg3.jpg" alt></p>
<p>上传成功，可以看到文件的基本信息。hdfs可以上传文件，同样可以下载文件，web界面通过点击文件名下载到本地windows。<br>Linux通过<code>hadoop fs -get &lt;hdfs上的路径&gt; &lt;linux路径&gt;</code>  </p>
<p>下载jdk到本地 /home/hadoop 目录下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@master ~]$ pwd</span><br><span class="line">/home/hadoop</span><br><span class="line">[hadoop@master ~]$ ll</span><br><span class="line">total 8</span><br><span class="line">drwxrwxr-x. 4 hadoop hadoop 4096 Jan 20 01:49 tmp</span><br><span class="line">drwxrwxr-x. 4 hadoop hadoop 4096 Jan 21 01:48 tools</span><br><span class="line">[hadoop@master ~]$ hadoop fs -get hdfs://master:9000/jdk-7u65-linux-i586.tar.gz /home/hadoop/</span><br><span class="line">[hadoop@master ~]$ ll</span><br><span class="line">total 140232</span><br><span class="line">-rw-r--r--. 1 hadoop hadoop 143588167 Jan 21 01:51 jdk-7u65-linux-i586.tar.gz</span><br><span class="line">drwxrwxr-x. 4 hadoop hadoop      4096 Jan 20 01:49 tmp</span><br><span class="line">drwxrwxr-x. 4 hadoop hadoop      4096 Jan 21 01:48 tools</span><br></pre></td></tr></table></figure></p>
<p>看到成功下载jdk到本地，表示hdfs正常工作，接下来测试一下mapreduce  </p>
<h2 id="二、测试MapReduce"><a href="#二、测试MapReduce" class="headerlink" title="二、测试MapReduce"></a>二、测试MapReduce</h2><p>测试 MapReduce 要通过写一些程序测试，这里可以先通过 hadoop 自带的一些例子程序来测试。<br>这些例子程序在<code>hadoop安装目录/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.x.x.jar</code>中，这个jar包里面有一些例子程序，其中就包含统计词频的 <strong>WordCount</strong>  </p>
<p>接下来就通过WordCount来实现一个小例子  </p>
<ul>
<li><p>新建一个文件testCount.txt，输入一些单词：  </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@master mapreduce]$ vi testCount.txt</span><br><span class="line">hello world</span><br><span class="line">hello hadoop</span><br><span class="line">hello hdfs</span><br><span class="line">hello mapreduce</span><br><span class="line">hello yarn</span><br></pre></td></tr></table></figure>
</li>
<li><p>mapreduce是在集群上面运行，所以数据也要放到集群上面<br>将testCount.txt上传到hdfs中，为了方便，在根目录下新建一个文件夹 wordcount/input 来存放数据</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@master mapreduce]$ hadoop fs -mkdir hdfs://master:9000/wordcount</span><br><span class="line">[hadoop@master mapreduce]$ hadoop fs -mkdir hdfs://master:9000/wordcount/input</span><br></pre></td></tr></table></figure>
<p>可以通过web界面查看文件夹<br><br><img src="http://wx2.sinaimg.cn/large/005TBZ5oly1fnnnxthe1yj30zn08tglt.jpg" alt><br>  </p>
<ul>
<li><p>上传testCount.txt到input文件夹中:<br><code>[hadoop@master mapreduce]$ hadoop fs -put testCount.txt /wordcount/input</code>  </p>
</li>
<li><p>运行 hadoop-mapreduce-examples.jar中的wordcount程序，注意wordcount后面要跟两个参数，<strong>/wordcount/input</strong> 数据输入源，  <strong>/wordcount/output</strong> 数据输出文件夹，运行成功后数据输出的地方，可自定义位置<br><code>hadoop jar hadoop-mapreduce-examples-2.4.1.jar wordcount /wordcount/input /wordcount/output</code>  </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">18/01/21 03:26:20 INFO mapreduce.Job:  map 0% reduce 0%</span><br><span class="line">18/01/21 03:26:27 INFO mapreduce.Job:  map 100% reduce 0%</span><br><span class="line">18/01/21 03:26:33 INFO mapreduce.Job:  map 100% reduce 100%</span><br><span class="line">18/01/21 03:26:34 INFO mapreduce.Job: Job job_1516452484789_0003 completed successfully</span><br><span class="line">18/01/21 03:26:34 INFO mapreduce.Job: Counters: 49</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>运行成功后，查看输出文件夹，里面多了两个文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@master mapreduce]$ hadoop fs -ls /wordcount/output</span><br><span class="line">Found 2 items</span><br><span class="line">-rw-r--r--   1 hadoop supergroup          0 2018-01-21 03:26 /wordcount/output/_SUCCESS</span><br><span class="line">-rw-r--r--   1 hadoop supergroup         51 2018-01-21 03:26 /wordcount/output/part-r-00000</span><br></pre></td></tr></table></figure></p>
<p>查看输出的文件内容<br><code>hadoop fs -cat /wordcount/output/part-r-00000</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/wordcount/output/part-r-00000</span><br><span class="line">hadoop  1</span><br><span class="line">hdfs    1</span><br><span class="line">hello   5</span><br><span class="line">mapreduce       1</span><br><span class="line">world   1</span><br><span class="line">yarn    1</span><br></pre></td></tr></table></figure></p>
<p>成功统计出每个单词出现的次数！</p>
]]></content>
      
        <categories>
            
            <category> hadoop </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ssh免密登陆]]></title>
      <url>/2018/01/02/02_ssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/</url>
      <content type="html"><![CDATA[<h1 id="ssh免密登陆"><a href="#ssh免密登陆" class="headerlink" title="ssh免密登陆"></a>ssh免密登陆</h1><p>在启动和停止hadoop的时候，我们发现需要输入很多次密码，在伪分布式的环境中，就一个节点，一个 NameNode 和几个DataNode，输入几次密码还可以接受，但是如果有1000个节点，这样的操作要重复1000次，这是我们不能接受的。由此我们要使用一种叫做 SSH 的登陆方式来帮助我们免密登陆。  </p>
<h2 id="一、什么是SSH"><a href="#一、什么是SSH" class="headerlink" title="一、什么是SSH"></a>一、什么是SSH</h2><p>SSH(Secure Shell)是一项创建在应用层和传输层基础上的安全协议，早期互联网通信都是明文通信，一旦被截获将暴露内容。1995年，芬兰研究员Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。  </p>
<p>如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。<br>简单的说，SSH就是一种网络协议，用于计算机之间的加密登录。  </p>
<h2 id="二、hdoop中的SSH免密登陆"><a href="#二、hdoop中的SSH免密登陆" class="headerlink" title="二、hdoop中的SSH免密登陆"></a>二、hdoop中的SSH免密登陆</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>有A和B两台机器</p>
<ol>
<li>在A上创建一对密钥对，包括一个公钥和一个私钥 （公钥文件：~/.ssh/id_rsa.pub； 私钥文件：~/.ssh/id_rsa）。</li>
<li>把A公钥放到B的（~/.ssh/authorized_keys）文件中, 自己保留好私钥.</li>
<li>在使用ssh登录时,ssh程序会发送A私钥去和B上的A公钥做匹配.如果匹配成功就可以登录了。  </li>
</ol>
<p>假设我们有两台机器，A实现SSH免密登陆访问B<br><strong>A.hadoop@master(192.168.2.100)</strong><br><strong>B.hadoop@slave(192.168.2.128)</strong>  </p>
<p>s<br><strong>第一步：生成密钥对</strong> <code>ssh-keygen -t rsa</code><br>在A机器上生成SSH密钥对，rsa 是加密算法，询问其密码直接回车默认为空，询问保存路径时直接回车采用默认路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@master /]$ ssh-keygen -t rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/home/hadoop/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /home/hadoop/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /home/hadoop/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">2b:42:8e:3d:ab:6e:98:e4:67:81:6c:5b:3d:86:ba:a8 hadoop@master</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+--[ RSA 2048]----+</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|. . +   S        |</span><br><span class="line">| = O +   .       |</span><br><span class="line">|+o= B o .        |</span><br><span class="line">|++.o + .         |</span><br><span class="line">|E+*..            |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure></p>
<p>一路回车，此时生成的密钥对：id_rsa和id_rsa.pub，会默认存储在”/home/hadoop/.ssh”目录下。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/home/hadoop/.ssh</span><br><span class="line">[hadoop@master .ssh]$ ll</span><br><span class="line">total 12</span><br><span class="line">-rw-------. 1 hadoop hadoop 1675 Jan 28 22:35 id_rsa</span><br><span class="line">-rw-r--r--. 1 hadoop hadoop  395 Jan 28 22:35 id_rsa.pub</span><br><span class="line">-rw-r--r--. 1 hadoop hadoop 1188 Jan 28 22:15 known_hosts</span><br><span class="line">[hadoop@master .ssh]$</span><br></pre></td></tr></table></figure></p>
<p><strong>第二步：将生成的A公钥远程拷贝到B机器  hadoop@slave(192.168.2.128)</strong><br>拷贝命令：<code>scp id_rsa.pub slave:/home/hadoop</code>  </p>
<p><strong>第三步：将公钥添加到授权文件”authorized_keys”</strong><br>登陆到B机器，在B机器上将A公钥追加到授权文件中<br><code>cat id_rsa.pub &gt;&gt; .ssh/authorized_keys</code>  </p>
<p><strong>第四步：修改文件”authorized_keys”权限</strong><br>这一步很重要，否则SSH登陆时仍然需要密码<br><code>chmod 700 ~/.ssh</code><br><code>chmod 600 authorized_keys</code>  </p>
<p><strong>第五步：修改SSH配置文件</strong><br><code>vi /etc/ssh/sshd_config</code>  </p>
<p>找到如下三条信息，默认是被注释的，将注释去掉，这三条信息的含义分别是：<br>RSAAuthentication yes # 启用 RSA 认证<br>PubkeyAuthentication yes # 启用公钥私钥配对认证方式<br>AuthorizedKeysFile .ssh/authorized_keys # 公钥文件路径（和authorized_keys文件路径相同）  </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile     .ssh/authorized_keys</span><br><span class="line"><span class="meta">#</span>AuthorizedKeysCommand none</span><br><span class="line"><span class="meta">#</span>AuthorizedKeysCommandRunAs nobody</span><br></pre></td></tr></table></figure>
<p><strong>第六步：重启SSH服务</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@slave .ssh]# service sshd restart</span><br><span class="line">Stopping sshd: [  OK  ]</span><br><span class="line">Starting sshd: [  OK  ]</span><br></pre></td></tr></table></figure></p>
<p><strong>第七步：验证，在 A机器master上使用 SSH登录 B机器 slave</strong>  </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@master /]$ ssh slave</span><br><span class="line">Last login: Sun Jan 28 08:33:08 2018 from 192.168.2.100</span><br><span class="line">[hadoop@slave ~]$</span><br></pre></td></tr></table></figure>
<p>到此就OK了，或者第一次需要输入密码，以后再次登陆就不需要输入密码了。如果配置完后每次都要输入密码，大多是因为文件权限的问题，重新检查.ssh文件夹和authorized_keys的访问权限。  </p>
<h2 id="三、伪分布式集群启动免密"><a href="#三、伪分布式集群启动免密" class="headerlink" title="三、伪分布式集群启动免密"></a>三、伪分布式集群启动免密</h2><p>回到一开始的问题，在启动hadoop集群的时候，我们需要输入很多次密码，用SSH的方式免密登陆，同样的道理，将自己的公钥添加到自己机器的授权文件中即可。<br><code>[hadoop@master .ssh]$ cat id_rsa.pub &gt;&gt; ./authorized_keys</code><br>修改权限：<br><code>[hadoop@master .ssh]$ chmod 600 authorized_keys</code>  </p>
<p>启动和停止一下hadoop看看，是不是就不用输入密码了。</p>
]]></content>
      
        <categories>
            
            <category> hadoop </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hadoop伪分布式的搭建]]></title>
      <url>/2018/01/01/01_hadoop%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="Hadoop伪分布式的搭建"><a href="#Hadoop伪分布式的搭建" class="headerlink" title="Hadoop伪分布式的搭建"></a>Hadoop伪分布式的搭建</h1><p>网上看了许多教程，参考着<a href="http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html" target="_blank" rel="noopener">官方文档</a>，按照步骤一步一步来，最后顺利在CentOS中成功安装Hadoop并运行，这里特做一个总结，下面就把详细的安装步骤叙述一下。  </p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>由于本人电脑配置不高，本文所使用的是 CentOS 6.5 32 位作为系统环境,也可以用其他版本的 Linux，例如: Ubuntu。<br>基于 Hadoop2.4.1(stable) 版本，Hadoop2.X.X 同样适用，</p>
<p>hadoop 官网本来提供的都是32位，因为我们服务器中使用的大部分都是64位，所以不得不编译。后来官网从 hadoop2.5 版本开始就提供了64位。请根据自己的 Linux 系统，下载对应的 hadoop 版本，否则64位的 hadoop 运行到32位的Linux上就会出现一些问题，可到<a href="https://archive.apache.org/dist/hadoop/common/" target="_blank" rel="noopener">官方网站</a>下载对应的稳定版本。  </p>
<h2 id="一、安装JDK"><a href="#一、安装JDK" class="headerlink" title="一、安装JDK"></a>一、安装JDK</h2><p>根据官方说明，Hadoop 版本大于等于2.7：要求 Java7(openjdk/oracle) 或者以上版本，hadoop版本小于等于2.6：要求至少为 Java 6(openjdk/oracle)，我们这里使用JDK1.7。<br>JDK下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a>  </p>
<ul>
<li><p><strong>上传JDK到linux中</strong><br>下载完成之后，将JDK上传到Linux中，这里推荐两种上传方式:<br><strong>1.FileZilla</strong>:免费小巧的FTP软件，安装之后功能简单明了，直接用鼠标拖动上传文件。<br><strong>2.SecureCRT</strong>:很好用的远程连接软件，上传文件只需要在SecureCRT连接服务器后，使用快捷键<code>Alt+P</code>打开sftp窗口<br>使用命令<code>put g:/jdk-7u65-linux-i586.tar.gz</code>(上传文件所在的路径)<br>个人喜欢使用第二种方式，一条命令搞定。  </p>
</li>
<li><p><strong>安装</strong><br>上传完成之后，在 hadoop 这个用户目录创建一个tools文件夹来专门管理文件（/home/hadoop/tools/），使用 命令<code>tar -zxvf</code>将JDK解压到tools文件夹中:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-7u65-linux-i586.tar.gz -C tools/</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>解压完成，进入jdk1.7.0_65/bin看到我们熟悉的java命令则安装成功</p>
<ul>
<li><strong>配置java的环境变量</strong><br>为了方便我们在系统中使用java命令，需要将/bin目录添加到环境变量中，使用命令：<br><code>vi /etc/profile</code><br>在最后一行加入：  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/home/hadoop/tools/jdk1.7.0_65</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>保存之后，刷新配置让其更改生效：<code>source /etc/profile</code><br>在/bin文件夹外面使用<code>java -version</code>能看到版本信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version <span class="string">"1.7.0_65"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.7.0_65-b17)</span><br><span class="line">Java HotSpot(TM) Client VM (build 24.65-b04, mixed mode)</span><br></pre></td></tr></table></figure></p>
<p>到此为止，Java已经安装完成。  </p>
<h2 id="二、安装Hadoop"><a href="#二、安装Hadoop" class="headerlink" title="二、安装Hadoop"></a>二、安装Hadoop</h2><p>使用上传JDK的方式将hadoop上传到Linux中<br>安装方式与安装jdk同理，解压到tools文件夹中即可：<br><code>tar -zxvf hadoop-2.4.1.tar.gz -C tools/</code>  </p>
<ul>
<li><p><strong>配置hadoop的环境变量</strong><br>在 JAVA_HOME 之后加入 hadoop的 /bin 和 /sbin<br><code>vi /etc/profile</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/home/hadoop/tools/jdk1.7.0_65</span><br><span class="line">export HADOOP_HOME=/home/hadoop/tools/hadoop-2.4.1</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>修改hadoop配置文件</strong><br>解压完成后开始修改hadoop的配置文件<br>配置文件位于<code>/hadoop-x.x.x/etc/hadoop</code>目录下<br>更改如下5个配置文件：  </p>
</li>
</ul>
<p>1.<code>vi hadoop-env.sh</code><br>hadoop 环境变量脚本文件 hadoop-env.sh<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/home/hadoop/tools/jdk1.7.0_65</span><br></pre></td></tr></table></figure></p>
<p>注意这里一定要是java的绝对路径，不可以用$JAVA_HOME代替。  </p>
<p>2.<code>vi core-site.xml</code><br>hadoop 核心配置文件 core-site.xml<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">      &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;hdfs://master:9000&lt;/value&gt;         </span><br><span class="line">    &lt;/property&gt;  </span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;/home/hadoop/tmp&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>
<p>这里的<value>hdfs://master:9000</value> ：master表示主机名，默认是localhost（也可以是IP地址），默认端口是9000。/home/hadoop/tmp为hadooop运行临时文件的目录，自己合理选择文件夹。  </p>
<p>3.<code>vi hdfs-site.xml</code><br>hdfs 配置文件 hdfs-site.xml<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>
<p>指定HDFS副本的数量  </p>
<p>4.<code>vi mapred-site.xml</code><br>MapReduce 配置文件 mapred-site.xml<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>
<p>5.<code>vi yarn-site.xml</code><br>yarn配置文件yarn-site.xml<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;                                                       </span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>
<p>指定哪些机器上面要启动namenode，我们这里只有一台机器，先加入本机的主机名,如果有多台机器,在后面依次添加主机名<br>最后修改slaves  <code>vi slaves</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@master hadoop]$ vi slaves</span><br><span class="line">master</span><br></pre></td></tr></table></figure></p>
<h2 id="三、启动Hadoop"><a href="#三、启动Hadoop" class="headerlink" title="三、启动Hadoop"></a>三、启动Hadoop</h2><p>这里在启动的时候，需要输入几次密码，一直输入密码就行  </p>
<p>1.格式化HDFS文件系统，对NameNode进行初始化<br><code>hdfs namenode -format</code>  </p>
<p>2.启动HDFS (启动NameNode和DataNode守护进程)<br><code>sbin/start-dfs.sh</code>  </p>
<p>3.启动YARN (启动ResourceManager 和 NodeManager 守护进程)<br><code>sbin/start-yarn.sh</code>  </p>
<p>4.验证是否启动成功，查看进程命令： <code>jps</code><br>如看到以下进程，则表示hadoop正常启动<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3039 ResourceManager</span><br><span class="line">2745 DataNode</span><br><span class="line">2885 SecondaryNameNode</span><br><span class="line">3311 NodeManager</span><br><span class="line">2634 NameNode</span><br><span class="line">3351 Jps</span><br></pre></td></tr></table></figure></p>
<p>启动成功后，可以在浏览器中输入<code>http://主机地址:50070</code>访问web界面，查看 NameNode 和 Datanode 信息，还可以在线查看 HDFS 中的文件。我这里通过主机名 master 访问(需要修改windows中hosts文件主机名对应的ip)，或者通过主机的ip地址也可以访问。  </p>
<p><img src="http://wx3.sinaimg.cn/large/005TBZ5oly1fnndaj82y2j30xe0iy755.jpg" alt>  </p>
<p>界面查看任务的运行情况：<code>http://主机地址:8088</code>  </p>
<p><img src="http://wx3.sinaimg.cn/large/005TBZ5oly1fnndrg8y6rj311s0cswfx.jpg" alt>  </p>
<p>至此，Hadoop伪分布式已成功搭建，下面来解决启动的时候输入很多次密码的问题,使用SSH的方式。</p>
]]></content>
      
        <categories>
            
            <category> hadoop </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java统一返回到前台的实体类封装]]></title>
      <url>/2017/12/28/java_%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E5%88%B0%E5%89%8D%E5%8F%B0%E7%9A%84%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%B0%81%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>封装返回到前台统一格式的实体类,包括返回码、返回消息、返回数据：<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.zhouqinsheng.faceExam.wxapi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> errcode;<span class="comment">// 返回码</span></span><br><span class="line">    <span class="keyword">private</span> String errmsg;<span class="comment">// 返回消息</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; data;<span class="comment">// 数据源</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getErrcode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrcode</span><span class="params">(<span class="keyword">int</span> errcode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errcode = errcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrmsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errmsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrmsg</span><span class="params">(String errmsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errmsg = errmsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Map&lt;String, Object&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>请求结果处理类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.zhouqinsheng.faceExam.apiTools;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.zhouqinsheng.faceExam.wxapi.ResultModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求结果处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultTools</span> </span>&#123;</span><br><span class="line">    <span class="comment">/****</span></span><br><span class="line"><span class="comment">     * 错误码记录：</span></span><br><span class="line"><span class="comment">     * 0--------成功</span></span><br><span class="line"><span class="comment">     * 1001-----请求传参错误</span></span><br><span class="line"><span class="comment">     * 1002-----没有对应内容</span></span><br><span class="line"><span class="comment">     * 1003-----此用户已存在</span></span><br><span class="line"><span class="comment">     * 1004-----上传文件为空</span></span><br><span class="line"><span class="comment">     * 404------异常抛出错误</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Errcode--返回码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Errmsg---404服务器内部异常时提示消息(返回码不是404时传空即可)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map------数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultModel <span class="title">result</span><span class="params">(<span class="keyword">int</span> Errcode, String Errmsg, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        ResultModel model = <span class="keyword">new</span> ResultModel();</span><br><span class="line">        model.setErrcode(Errcode);</span><br><span class="line">        <span class="keyword">switch</span> (Errcode) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                model.setErrmsg(<span class="string">"成功"</span>);</span><br><span class="line">                <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    model.setData(map);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1001</span>:</span><br><span class="line">                model.setErrmsg(<span class="string">"请求传参错误 "</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1002</span>:</span><br><span class="line">                model.setErrmsg(<span class="string">"没有对应内容 "</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1003</span>:</span><br><span class="line">                model.setErrmsg(<span class="string">"此用户已存在"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1004</span>:</span><br><span class="line">                model.setErrmsg(<span class="string">"上传文件为空"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">                model.setErrmsg(Errmsg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                model.setErrmsg(<span class="string">"未知错误"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用方法，返回一个封装好的统一实体类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 教师登录，通过教工号查询教师</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> jobNumber</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/login/&#123;jobNumber&#125;"</span>,method=RequestMethod.POST)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ResultModel <span class="title">login</span><span class="params">(@PathVariable String jobNumber)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (jobNumber==<span class="keyword">null</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span> ResultTools.result(<span class="number">1001</span>,<span class="string">""</span>,<span class="keyword">null</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			TeacherInfo teacher = teacherInfoService.findByJobNumber(jobNumber);</span><br><span class="line">			Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">			<span class="keyword">if</span> (teacher!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				map.put(<span class="string">"content"</span>,teacher);</span><br><span class="line">				<span class="keyword">return</span> ResultTools.result(<span class="number">0</span>, <span class="string">""</span>, map);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> ResultTools.result(<span class="number">1002</span>, <span class="string">""</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="keyword">return</span> ResultTools.result(<span class="number">404</span>, e.getMessage(), <span class="keyword">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 解决方案 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java图片压缩大小的方法]]></title>
      <url>/2017/12/18/java_%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%A4%A7%E5%B0%8F%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>java图片裁剪、压缩的方法。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.zhouqinsheng.faceExam.apiTools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.CropImageFilter;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.FilteredImageSource;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.ImageFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImgTools</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照 宽高 比例压缩</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> img</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thumbnail_w_h</span><span class="params">(File img, <span class="keyword">int</span> width, <span class="keyword">int</span> height,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     OutputStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedImage bi = ImageIO.read(img);</span><br><span class="line">        <span class="keyword">double</span> srcWidth = bi.getWidth(); <span class="comment">// 源图宽度</span></span><br><span class="line">        <span class="keyword">double</span> srcHeight = bi.getHeight(); <span class="comment">// 源图高度</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> scale = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (width &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            scale = width / srcWidth;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (height &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            scale = height / srcHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (width &gt; <span class="number">0</span> &amp;&amp; height &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            scale = height / srcHeight &lt; width / srcWidth ? height / srcHeight</span><br><span class="line">                    : width / srcWidth;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        thumbnail(img, (<span class="keyword">int</span>) (srcWidth * scale), (<span class="keyword">int</span>) (srcHeight * scale), out);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照固定宽高原图压缩</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> img</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thumbnail</span><span class="params">(File img, <span class="keyword">int</span> width, <span class="keyword">int</span> height,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 OutputStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedImage BI = ImageIO.read(img);</span><br><span class="line">        Image image = BI.getScaledInstance(width, height, Image.SCALE_SMOOTH);</span><br><span class="line"></span><br><span class="line">        BufferedImage tag = <span class="keyword">new</span> BufferedImage(width, height,</span><br><span class="line">                BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        Graphics g = tag.getGraphics();</span><br><span class="line">        g.setColor(Color.RED);</span><br><span class="line">        g.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>); <span class="comment">// 绘制处理后的图</span></span><br><span class="line">        g.dispose();</span><br><span class="line">        ImageIO.write(tag, <span class="string">"JPEG"</span>, out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照宽高裁剪</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcImageFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destWidth</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destHeight</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cut_w_h</span><span class="params">(File srcImageFile, <span class="keyword">int</span> destWidth,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">int</span> destHeight, OutputStream out)</span> </span>&#123;</span><br><span class="line">        cut_w_h(srcImageFile, <span class="number">0</span>, <span class="number">0</span>, destWidth, destHeight, out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cut_w_h</span><span class="params">(File srcImageFile, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> destWidth,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">int</span> destHeight, OutputStream out)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Image img;</span><br><span class="line">            ImageFilter cropFilter;</span><br><span class="line">            <span class="comment">// 读取源图像</span></span><br><span class="line">            BufferedImage bi = ImageIO.read(srcImageFile);</span><br><span class="line">            <span class="keyword">int</span> srcWidth = bi.getWidth(); <span class="comment">// 源图宽度</span></span><br><span class="line">            <span class="keyword">int</span> srcHeight = bi.getHeight(); <span class="comment">// 源图高度</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (srcWidth &gt;= destWidth &amp;&amp; srcHeight &gt;= destHeight) &#123;</span><br><span class="line">                Image image = bi.getScaledInstance(srcWidth, srcHeight,</span><br><span class="line">                        Image.SCALE_DEFAULT);</span><br><span class="line"></span><br><span class="line">                cropFilter = <span class="keyword">new</span> CropImageFilter(x, y, destWidth, destHeight);</span><br><span class="line">                img = Toolkit.getDefaultToolkit().createImage(</span><br><span class="line">                        <span class="keyword">new</span> FilteredImageSource(image.getSource(), cropFilter));</span><br><span class="line">                BufferedImage tag = <span class="keyword">new</span> BufferedImage(destWidth, destHeight,</span><br><span class="line">                        BufferedImage.TYPE_INT_RGB);</span><br><span class="line">                Graphics g = tag.getGraphics();</span><br><span class="line">                g.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>); <span class="comment">// 绘制截取后的图</span></span><br><span class="line">                g.dispose();</span><br><span class="line">                <span class="comment">// 输出为文件</span></span><br><span class="line">                ImageIO.write(tag, <span class="string">"JPEG"</span>, out);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">// #cut_w_h</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File img = <span class="keyword">new</span> File(<span class="string">"D:/uploadImg/01.jpg"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"D:/uploadImg/yasuo.jpg"</span>);</span><br><span class="line">        <span class="comment">// ImgTools.thumbnail(img, 100, 100, fos);</span></span><br><span class="line">        <span class="comment">// ImgTools.cut_w_h(img, 230, 200, fos);</span></span><br><span class="line">        <span class="comment">//ImgTools.thumbnail_w_h(img, 100, 0, fos);</span></span><br><span class="line">        ImgTools.thumbnail_w_h(img,<span class="number">400</span>,<span class="number">400</span>,fos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 解决方案 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java后台发送请求封装方法]]></title>
      <url>/2017/12/10/java_%E5%90%8E%E5%8F%B0%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>java后台发送请求封装方法。<br><a id="more"></a><br>封装HttpUtil:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.zhouqinsheng.faceExam.apiTools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.NameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.StringEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.message.BasicNameValuePair;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String Charset = <span class="string">"utf-8"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送请求，如果失败，会返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">post</span><span class="params">(String url, Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 处理请求地址</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpClient client = HttpClientBuilder.create().build();</span><br><span class="line">            URI uri = <span class="keyword">new</span> URI(url);</span><br><span class="line">            HttpPost post = <span class="keyword">new</span> HttpPost(uri);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加参数</span></span><br><span class="line">            List&lt;NameValuePair&gt; params = <span class="keyword">new</span> ArrayList&lt;NameValuePair&gt;();</span><br><span class="line">            <span class="keyword">for</span> (String str : map.keySet()) &#123;</span><br><span class="line">                params.add(<span class="keyword">new</span> BasicNameValuePair(str, map.get(str)));</span><br><span class="line">            &#125;</span><br><span class="line">            post.setEntity(<span class="keyword">new</span> UrlEncodedFormEntity(params, Charset));</span><br><span class="line">            <span class="comment">// 执行请求</span></span><br><span class="line">            HttpResponse response = client.execute(post);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// 处理请求结果</span></span><br><span class="line">                StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                InputStream in = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in = response.getEntity().getContent();</span><br><span class="line">                    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in,Charset));</span><br><span class="line">                    String line = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        buffer.append(line);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 关闭流</span></span><br><span class="line">                    <span class="keyword">if</span> (in != <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            in.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> buffer.toString();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送请求，如果失败会返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">post</span><span class="params">(String url, String str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 处理请求地址</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpClient client = HttpClientBuilder.create().build();</span><br><span class="line">            URI uri = <span class="keyword">new</span> URI(url);</span><br><span class="line">            HttpPost post = <span class="keyword">new</span> HttpPost(uri);</span><br><span class="line">            post.setEntity(<span class="keyword">new</span> StringEntity(str, Charset));</span><br><span class="line">            <span class="comment">// 执行请求</span></span><br><span class="line">            HttpResponse response = client.execute(post);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// 处理请求结果</span></span><br><span class="line">                StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                InputStream in = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in = response.getEntity().getContent();</span><br><span class="line">                    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in,<span class="string">"utf-8"</span>));</span><br><span class="line">                    String line = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        buffer.append(line);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 关闭流</span></span><br><span class="line">                    <span class="keyword">if</span> (in != <span class="keyword">null</span>)</span><br><span class="line">                        in.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> buffer.toString();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送GET方式的请求，并返回结果字符串。</span></span><br><span class="line"><span class="comment">     * &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果失败，返回为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpClient client = HttpClientBuilder.create().build();</span><br><span class="line">            URI uri = <span class="keyword">new</span> URI(url);</span><br><span class="line">            HttpGet get = <span class="keyword">new</span> HttpGet(uri);</span><br><span class="line">            HttpResponse response = client.execute(get);</span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                InputStream in = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in = response.getEntity().getContent();</span><br><span class="line">                    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in,Charset));</span><br><span class="line">                    String line = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        buffer.append(line);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (in != <span class="keyword">null</span>)</span><br><span class="line">                        in.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> buffer.toString();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>发送请求返回json:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">getSessionByCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        String url = <span class="keyword">this</span>.requestUrl + <span class="string">"?appid="</span> + appId + <span class="string">"&amp;secret="</span> + appSecret + <span class="string">"&amp;js_code="</span> + code + <span class="string">"&amp;grant_type="</span></span><br><span class="line">                + grantType;</span><br><span class="line">        <span class="comment">// 发送请求</span></span><br><span class="line">        String data = HttpUtil.get(url);</span><br><span class="line">        log.debug(<span class="string">"请求地址：&#123;&#125;"</span>, url);</span><br><span class="line">        log.debug(<span class="string">"请求结果：&#123;&#125;"</span>, data);</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        Map&lt;String, Object&gt; json = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            json = mapper.readValue(data, Map.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 形如&#123;"session_key":"6w7Br3JsRQzBiGZwvlZAiA==","openid":"oQO565cXXXXXEvc4Q_YChUE8PqB60Y"&#125;的字符串</span></span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 解决方案 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[图片转Base64方法]]></title>
      <url>/2017/11/08/java_%E5%9B%BE%E7%89%87%E8%BD%ACBase64%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>在开发中经常遇到图片格式、编码的转换，这里记录一下图片转Base64的方法。  </p>
<a id="more"></a>
<p>FileUtil工具类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.zhouqinsheng.faceExam.apiTools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件读取工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取文件内容，作为字符串返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readFileAsString</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(filePath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (file.length() &gt; <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"File is too large"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder((<span class="keyword">int</span>) (file.length()));</span><br><span class="line">        <span class="comment">// 创建字节输入流</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line">        <span class="comment">// 创建一个长度为10240的Buffer</span></span><br><span class="line">        <span class="keyword">byte</span>[] bbuf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10240</span>];</span><br><span class="line">        <span class="comment">// 用于保存实际读取的字节数</span></span><br><span class="line">        <span class="keyword">int</span> hasRead = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ( (hasRead = fis.read(bbuf)) &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">            sb.append(<span class="keyword">new</span> String(bbuf, <span class="number">0</span>, hasRead));</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据文件路径读取byte[] 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] readFileByBytes(String filePath) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(filePath);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream((<span class="keyword">int</span>) file.length());</span><br><span class="line">            BufferedInputStream in = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">                <span class="keyword">short</span> bufSize = <span class="number">1024</span>;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[bufSize];</span><br><span class="line">                <span class="keyword">int</span> len1;</span><br><span class="line">                <span class="keyword">while</span> (-<span class="number">1</span> != (len1 = in.read(buffer, <span class="number">0</span>, bufSize))) &#123;</span><br><span class="line">                    bos.write(buffer, <span class="number">0</span>, len1);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">byte</span>[] var7 = bos.toByteArray();</span><br><span class="line">                <span class="keyword">return</span> var7;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        in.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var14) &#123;</span><br><span class="line">                    var14.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                bos.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Base64Util工具类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.zhouqinsheng.faceExam.apiTools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base64Util</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> last2byte = (<span class="keyword">char</span>) Integer.parseInt(<span class="string">"00000011"</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> last4byte = (<span class="keyword">char</span>) Integer.parseInt(<span class="string">"00001111"</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> last6byte = (<span class="keyword">char</span>) Integer.parseInt(<span class="string">"00111111"</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> lead6byte = (<span class="keyword">char</span>) Integer.parseInt(<span class="string">"11111100"</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> lead4byte = (<span class="keyword">char</span>) Integer.parseInt(<span class="string">"11110000"</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> lead2byte = (<span class="keyword">char</span>) Integer.parseInt(<span class="string">"11000000"</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] encodeTable = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'+'</span>, <span class="string">'/'</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Base64Util</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(<span class="keyword">byte</span>[] from)</span> </span>&#123;</span><br><span class="line">        StringBuilder to = <span class="keyword">new</span> StringBuilder((<span class="keyword">int</span>) ((<span class="keyword">double</span>) from.length * <span class="number">1.34</span>D) + <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> currentByte = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; from.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (num %= <span class="number">8</span>; num &lt; <span class="number">8</span>; num += <span class="number">6</span>) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (num) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        currentByte = (<span class="keyword">char</span>) (from[i] &amp; lead6byte);</span><br><span class="line">                        currentByte = (<span class="keyword">char</span>) (currentByte &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        currentByte = (<span class="keyword">char</span>) (from[i] &amp; last6byte);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                        currentByte = (<span class="keyword">char</span>) (from[i] &amp; last4byte);</span><br><span class="line">                        currentByte = (<span class="keyword">char</span>) (currentByte &lt;&lt; <span class="number">2</span>);</span><br><span class="line">                        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; from.length) &#123;</span><br><span class="line">                            currentByte = (<span class="keyword">char</span>) (currentByte | (from[i + <span class="number">1</span>] &amp; lead2byte) &gt;&gt;&gt; <span class="number">6</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                        currentByte = (<span class="keyword">char</span>) (from[i] &amp; last2byte);</span><br><span class="line">                        currentByte = (<span class="keyword">char</span>) (currentByte &lt;&lt; <span class="number">4</span>);</span><br><span class="line">                        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; from.length) &#123;</span><br><span class="line">                            currentByte = (<span class="keyword">char</span>) (currentByte | (from[i + <span class="number">1</span>] &amp; lead4byte) &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                to.append(encodeTable[currentByte]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (to.length() % <span class="number">4</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">4</span> - to.length() % <span class="number">4</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">                to.append(<span class="string">"="</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> to.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 解决方案 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux中的用户和用户组]]></title>
      <url>/2017/07/02/Linux_%E7%94%A8%E6%88%B7%E4%B8%8E%E7%94%A8%E6%88%B7%E7%BB%84_01/</url>
      <content type="html"><![CDATA[<h1 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h1><h3 id="掌握知识重点"><a href="#掌握知识重点" class="headerlink" title="掌握知识重点:"></a>掌握知识重点:</h3><ol>
<li>命令：管理用户和用户组方法的命令</li>
<li>设置文件属性及访问权限的命令</li>
</ol>
<h3 id="用户与用户组的概念"><a href="#用户与用户组的概念" class="headerlink" title="用户与用户组的概念"></a>用户与用户组的概念</h3><p>不同用户具有不同的权限，Linux操作系统是通过用户来限制使用者使用资源划分，实现了多用户多任务的运行机制</p>
<p>例如：有四个用户：root、www、ftp、mysql，同一时间内，各自用户登录执行各自不同的任务，相互不影响</p>
<h5 id="Linux用户分为三种角色："><a href="#Linux用户分为三种角色：" class="headerlink" title="Linux用户分为三种角色："></a>Linux用户分为三种角色：</h5><p>（1） 超级用户：默认是root，具备最高管理权限</p>
<p>（2）普通用户：权限只能对自己目录下的文件进行访问和修改，可以登录系统</p>
<p>（3）虚拟用户：该用户不能登录系统，但是用于系统管理，满足系统进程对文件属主的要求</p>
<a id="more"></a>
<h5 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h5><p>作用：简化用户管理工作</p>
<p>例如：多个用户具有相同的权限，可以为文件授权，如有10个用户，授权10次，这样的不太合理，我们可以通过用户组的方式，将多个用户建立一个组，让文件为用户组授权</p>
<h5 id="用户和用户组对应关系有：1对1、1对多、多对1"><a href="#用户和用户组对应关系有：1对1、1对多、多对1" class="headerlink" title="用户和用户组对应关系有：1对1、1对多、多对1"></a>用户和用户组对应关系有：1对1、1对多、多对1</h5><p>1对1：一个用户属于一个用户组</p>
<p>1对多：一个用户属于多个用户组</p>
<p>多对1：多个用户属于一个组</p>
<p>Linux系统中每一个用户都至少属于一个用户组</p>
<h3 id="与用户管理相关的系统文件"><a href="#与用户管理相关的系统文件" class="headerlink" title="与用户管理相关的系统文件"></a>与用户管理相关的系统文件</h3><h5 id="与用户相关的系统文件有：-etc-passwd、-etc-shadow、-etc-group、-etc-gshadow"><a href="#与用户相关的系统文件有：-etc-passwd、-etc-shadow、-etc-group、-etc-gshadow" class="headerlink" title="与用户相关的系统文件有： /etc/passwd、/etc/shadow、/etc/group、/etc/gshadow"></a>与用户相关的系统文件有： /etc/passwd、/etc/shadow、/etc/group、/etc/gshadow</h5><ol>
<li>用户信息配置文件，用户信息存放于该文件中，可以进行修改配置      <strong>路径：/etc/passwd</strong></li>
<li>用户密码配置文件，存放系统用户的密码管理文件     <strong>路径：/etc/shadow</strong></li>
<li>用户组配置文件，对用户组进行管理及控制访问权限的文件      <strong>路径:/ect/group</strong></li>
<li>用户组密码配置文件，该文件用于定义用户组命令、组管理员等信息     <strong>路径：/ect/gshadow</strong></li>
</ol>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>对用户的管理命令主要包含用户创建、修改、删除</p>
<h4 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1.创建用户"></a>1.创建用户</h4><p>命令格式：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd [选项] 用户名</span><br></pre></td></tr></table></figure>
<p>创建用户可支持的 [选项]</p>
<table>
<thead>
<tr>
<th style="text-align:center">选项命令</th>
<th>功能说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>-d</strong></td>
<td><strong>创建用户的时候指定用户主目录</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong>-g</strong></td>
<td><strong>创建用户的时候指定用户组</strong></td>
</tr>
<tr>
<td style="text-align:center">-m</td>
<td>若主目录不存在，则创建</td>
</tr>
<tr>
<td style="text-align:center">-M</td>
<td>不创建主目录</td>
</tr>
<tr>
<td style="text-align:center"><strong>-c</strong></td>
<td><strong>对该账号添加注释</strong></td>
</tr>
<tr>
<td style="text-align:center">-r</td>
<td>创建系统账号</td>
</tr>
<tr>
<td style="text-align:center"><strong>-s</strong></td>
<td><strong>指定用户登录的时候使用的shell类型，默认为/bin/bash</strong></td>
</tr>
</tbody>
</table>
<p><strong>例1:创建用户tom</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">useradd tom</span></span><br></pre></td></tr></table></figure>
<p>以上命令回创建用户tom，但是创建的时候没有指定tom的用户组和主目录，系统会创建同名的用户组tom作为tom用户的<strong>用户组</strong> ，同时还会在/home目录下创建同名的tom目录作为tom的<strong>主目录</strong></p>
<p><strong>例2：创建名为zhangqi的用户，设置主目录为：var/zhangqi，作为root组的成员，加注释：101school，指定用户shell为：bin/sh</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">useradd -d /var/zhangqi -g root -c 101school -s /bin/sh zhangqi</span></span><br></pre></td></tr></table></figure>
<h4 id="2-修改用户"><a href="#2-修改用户" class="headerlink" title="2.修改用户"></a>2.修改用户</h4><p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod 选项 用户名</span><br></pre></td></tr></table></figure>
<p>修改用户支持的命令选项说明</p>
<table>
<thead>
<tr>
<th><strong>选项</strong></th>
<th><strong>功能说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>-l</strong></td>
<td><strong>修改用户名</strong></td>
</tr>
<tr>
<td>-e</td>
<td>修改用户的描述信息</td>
</tr>
<tr>
<td><strong>-d</strong></td>
<td><strong>修改用户主目录</strong></td>
</tr>
<tr>
<td>-L</td>
<td>锁定账号，临时禁止用户登录</td>
</tr>
<tr>
<td>-U</td>
<td>对账号进行解锁</td>
</tr>
<tr>
<td><strong>-g</strong></td>
<td><strong>修改用户的所属组</strong></td>
</tr>
<tr>
<td>-s</td>
<td>修改用户登陆后使用的Shell类型</td>
</tr>
<tr>
<td>-u</td>
<td>修改用户ID号</td>
</tr>
<tr>
<td>-e</td>
<td>修改用户的有效期</td>
</tr>
<tr>
<td>-f</td>
<td>修改用户密码在多少天后过期</td>
</tr>
<tr>
<td><strong>-c</strong></td>
<td><strong>修改用户的注释</strong></td>
</tr>
</tbody>
</table>
<p><strong>例1：修改用户zhangqi的用户名为zhangqiming</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">usermod -l zhangqiming zhangqi</span></span><br></pre></td></tr></table></figure>
<p><strong>例2：修改zhangqiming用户的主目录修改为/var/zhangqiming</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">usermod -d /var/zhangqiming zhangqiming</span></span><br></pre></td></tr></table></figure>
<p><strong>例3：修改zhangqiming的注释信息为neusoft</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">usermod -c neusoft zhangqiming</span></span><br></pre></td></tr></table></figure>
<h4 id="3-用户删除"><a href="#3-用户删除" class="headerlink" title="3. 用户删除"></a>3. 用户删除</h4><p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel [-r] 用户名         -r：在删除用户的时候，连同用户对应的主目录一起删除</span><br></pre></td></tr></table></figure>
<p><strong>例：删除用户zhangqiming及其主目录、用户相关的文档</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">userdel -r zhangqiming</span></span><br></pre></td></tr></table></figure>
<h4 id="4-用passwd命令管理用户登录密码"><a href="#4-用passwd命令管理用户登录密码" class="headerlink" title="4. 用passwd命令管理用户登录密码"></a>4. 用passwd命令管理用户登录密码</h4><p>只有root（超级管理员）用户才有权限设置指定用户的密码，普通用户只能设置或修改自己的密码，直接执行passwd命令，不加用户名可以设置当前用户的密码</p>
<p>命令格式：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd [选项] 用户名</span><br></pre></td></tr></table></figure>
<p>除了可以设置密码外，还可以使用passwd管理用户的密码</p>
<p>passwd的命令选项及功能说明:</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-l</td>
<td>锁定用户密码</td>
</tr>
<tr>
<td>-u</td>
<td>解锁密码</td>
</tr>
<tr>
<td>-S</td>
<td>查询用户密码状态</td>
</tr>
<tr>
<td>-d</td>
<td>删除用户密码</td>
</tr>
</tbody>
</table>
<h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p>用户组的管理，主要包括对用户组的创建、用户组信息的修改以及用户组的删除</p>
<p><strong>1.用户组的创建</strong></p>
<p>用户组的功能是讲用户进行分类归组，便于进行访问控制，一个用户可以同时属于多个多用户组，一个用户组也可以包含多个不同的用户，用户和用户组是多对多的关系</p>
<p>命令格式：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd [选项] 用户组名称       常用选项-r:创建系统用户组</span><br></pre></td></tr></table></figure>
<p>每一个用户组都有一个自己的ID，称为GID，如果GID大于等于1000，该用户组则为系统用户组，小于1000称为普通用户组</p>
<p><strong>例：创建用户组student</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">groupadd student</span></span><br></pre></td></tr></table></figure>
<p><strong>2.用户组的修改</strong></p>
<p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod 选项 组名</span><br></pre></td></tr></table></figure>
<p>groupmod命令选项及功能说明：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-n</td>
<td>修改组名</td>
</tr>
<tr>
<td>-g</td>
<td>修改组标识GID</td>
</tr>
</tbody>
</table>
<p><strong>例：将用户组student修改为teacher</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">groupmod -n teacher student</span></span><br></pre></td></tr></table></figure>
<p><strong>3.用户组的删除</strong></p>
<p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 组名</span><br></pre></td></tr></table></figure>
<p><strong>例：删除用户组teacher</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">groupdel teacher</span></span><br></pre></td></tr></table></figure>
<p>注意：在删除用户组的时候，被删除的用户组不能使某个用户的主组，否则无法删除，若必须删除，则应先删除用户，再删除用户组</p>
<p><strong>4.维护组中的成员</strong></p>
<p>gpasswd可以用于把用户添加在组、从组中删除、把用户设置为管理员</p>
<p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd 选项 用户名 组名</span><br></pre></td></tr></table></figure>
<p>gpasswd命令选项及功能说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>添加用户到组</td>
</tr>
<tr>
<td>-d</td>
<td>将用户从组中删除</td>
</tr>
<tr>
<td>-A</td>
<td>设置用户为组管理员</td>
</tr>
</tbody>
</table>
<p><strong>例1：将lili用户添加到teacher组</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">gpasswd -a lili teacher</span></span><br></pre></td></tr></table></figure>
<p><strong>例2：将lili从teacher组中删除</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">gpasswd -d lili teacher</span></span><br></pre></td></tr></table></figure>
<p><strong>例3：将lili设置为teacher组的管理员</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">gpasswd -A lili teacher</span></span><br></pre></td></tr></table></figure>
<h1 id="项目实践"><a href="#项目实践" class="headerlink" title="项目实践"></a>项目实践</h1><h3 id="项目一：用户账号与用户组的创建"><a href="#项目一：用户账号与用户组的创建" class="headerlink" title="项目一：用户账号与用户组的创建"></a>项目一：用户账号与用户组的创建</h3><p>两个用户组：</p>
<p>用户组1：dgroups01     </p>
<p>用户名：– dguser0101     – 密码：dguser0101</p>
<p>用户组2：dgroups02 </p>
<p>用户名：– dguser0202      –密码：dguser0202</p>
<h6 id="创建用户组"><a href="#创建用户组" class="headerlink" title="创建用户组"></a>创建用户组</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">groupadd 用户组名称</span></span><br></pre></td></tr></table></figure>
<h6 id="创建指定用户组下的用户"><a href="#创建指定用户组下的用户" class="headerlink" title="创建指定用户组下的用户"></a>创建指定用户组下的用户</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">useradd -g 用户组名称 用户名</span></span><br></pre></td></tr></table></figure>
<h6 id="设置创建用户的密码"><a href="#设置创建用户的密码" class="headerlink" title="设置创建用户的密码"></a>设置创建用户的密码</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">passwd 密码</span></span><br></pre></td></tr></table></figure>
<h6 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">创建用户组1： #groupadd dgroups01                     //创建用户组dgroups01</span><br><span class="line">在用户组1下创建账号1: #useradd -g dgroups01 dguser0101  //创建用户账号dguser011在的group-1组</span><br><span class="line">为创建完的账号1设置密码： #passwd dguser0101    //设置密码</span><br><span class="line">创建用户组2： #groupadd dgroups02  //创建用户组dgroups02</span><br><span class="line">在用户组2下创建账号2： #useradd -g dgroups02 dguser0202 //在dgroups02下创建用户</span><br><span class="line">为创建完的账号2设置密码：#passwd dguser0202</span><br></pre></td></tr></table></figure>
<h3 id="项目二：文件属性的读取和修改"><a href="#项目二：文件属性的读取和修改" class="headerlink" title="项目二：文件属性的读取和修改"></a>项目二：文件属性的读取和修改</h3><ul>
<li>设计部Web项目组近期招聘了两名在校大学生到项目组实习，并为他们做了关于Linux基础应用方面的培训。两人为了尽快熟悉Linux系统，共享学习心得打算在系统的/tmp目录下创建一个名为ourfile文件，用于分享学习收获。因此两用户需要可以随时读取和修改ourfile文件的内容。</li>
<li>本项目中两个人要共享一份文件，都需要对文件进行随时地读取和修改</li>
</ul>
<p><strong>【操作过程】</strong></p>
<ol>
<li>创建账号：dguser0102，以dguser0102账号登录系统</li>
<li>使用touch命令创建文件ourfile</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">touch /tmp/ourfile                            //创建完成之后若其他用户修改文件ourfile，则系统会报错“文件只读”，而不能完成修改功能</span></span><br></pre></td></tr></table></figure>
<ol>
<li>使用chmod修改文件的访问权限</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">chmod 666 /tmp/ourfile</span></span><br></pre></td></tr></table></figure>
<p><strong>1.【文件属性-权限的设置和修改】</strong></p>
<p>使用长格式产看目录信息时，会看到每个文件或目录开始会有如下的，信息，这个信息就是文件属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lrwxrwxrwx</span><br><span class="line">dr-xrwx-wx</span><br><span class="line">drwx-wxr-x</span><br></pre></td></tr></table></figure>
<p>文件属性由10个字母组成，第一个字母表示文件类型，后面九个字母分为三组，表示文件的访问权限，构成如下表所示：</p>
<table><br>    <tr><br>        <td>类型标识</td><br>        <td>r</td><br>        <td>w</td><br>        <td>x</td><br>        <td>r</td><br>        <td>w</td><br>        <td>x</td><br>        <td>r</td><br>        <td>w</td><br>        <td>x</td><br>    </tr><br>    <tr><br>        <td></td><br>        <td colspan="3">文件所有者对该文件拥有的权限</td><br>        <td colspan="3">文件所属组队文件拥有的权限</td><br>        <td colspan="3">其他用户对文件拥有的权限</td><br>    </tr><br></table><br>

<p>用户对文件的操作权限分为读、写和执行三种，分别用r、w、x表示。若用户没有某个权限，则在相应权限位用“-”占位，代表无此权限。</p>
<p>若文件具有x属性，是可执行的文件。具有x属性的文件一般是二进制程序文件或可执行的脚本文件。若目录具有x属性，则表示允许打开该目录中的文件，并且可用cd命令进入该目录。</p>
<p>只有root用户和文件拥有者才可以修改文件访问权限。</p>
<p>第一个字母是类型标识，用来说明文件的类型，在Linux中文件的类型有七种，分别是：</p>
<ul>
<li>d(目录文件)</li>
<li>l(符号链接，相当于windows下的快捷方式)</li>
<li>s(套接字文件)</li>
<li>b(块设备文件，二进制文件)</li>
<li>c(字符设备文件)</li>
<li>p(管道文件)</li>
<li>-(普通文件)</li>
</ul>
<p><strong>【修改文件属性】</strong></p>
<p>修改文件访问权限的chmod命令</p>
<p><strong>(1)绝对权限方法</strong></p>
<p>文件的九位权限除了可用r、w、x来表示外，还可用一个3位的十进制数字来表示。</p>
<p>比如:644，其百位上的数字代表文件拥有者的权限，十位上的数字代表所属用户组的权限，个位上的数字代表其他用户对该文件的权限。这种采用数字来表示权限的方法，称为绝对权限表示法也称为数字权限表示法。</p>
<p>由于用户的权限是用rwx来表示的，没有的权限对应位置上用“-”表示，有权限的位置可用1表示，没有权限的位置用0来表示，这样就会形成一个3位的二进制编码，然后将该二进制数转换成对应的十进制数，这样就得到一个0~7的数，从而就可以实现十进制数来表示用户对文件的权限。</p>
<p>例如：rwx –&gt;111–&gt;7        r-x–&gt;101–&gt;5         –x–&gt;001–&gt;1        -wx–&gt;011–&gt;3</p>
<p>绝对权限方法更改文件权限的命令格式：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">chmod [选项] 绝对权限值 要修改的文件或目录</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>例1：修改当前目录下test文件的访问权限，使所有用户对该文件均有读写权限</strong></li>
</ul>
<p>分析：所有用户均有则权限如下：</p>
<p>rw-rw-rw-<br>110110110<br>666</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">chmod 666 <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure>
<p><strong>(2)相对权限方法</strong></p>
<p>相对权限方式更改权限的命令格式：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">chmod 修改对象 运算符 用户权限 要修改的文件或目录名称</span></span><br></pre></td></tr></table></figure>
<p>– <strong>修改对象</strong>可以是u（文件的所有者）、g（文件的所属组）、o（其他用户）</p>
<p>– <strong>运算符</strong>可以是+（添加）、-（删除）、=（只赋值）</p>
<p>– <strong>用户权限</strong>可以是r（读）、w（写）、x（运行）</p>
<ul>
<li><strong>例：对文件test的组用户添加写权限</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">chmod g + w <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>例：修改当前目录下test文件的访问权限，使所有用户对该文件均有读写权限</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">chmod ugo + rw <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>例：增加组用户对当前目录下file文件的写权限，取消其他用户对file文件的读权限</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">chmod g + w file</span></span><br><span class="line"><span class="meta">#</span><span class="bash">chmod o - w file</span></span><br></pre></td></tr></table></figure>
<p><strong>2.【修改文件所有者(所属组)的chown命令】</strong></p>
<p>root用户可以将一个文件或目录的拥有权转让其他用户，使其他用户成为该文件或目录的所有者，通过chown命令还可以修改文件所属的组</p>
<p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown [选项] 新所有者.新用户组 要修改的文件或目录名称       选项：常用的命令是-R，可以通过递归设置指定目录下的全部文件，包括子目录和子文件</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>例：将当前目录下的file文件的所有者修改为tom，所属组改为tom组</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">chown tom.tom file</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>例：将当前目录下的file文件的所属组改为tom组</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">chown .tom file</span></span><br></pre></td></tr></table></figure>
<p><strong>3.【提升用户权限】</strong></p>
<p>(1) 使用su命令切换用户</p>
<p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su 用户名</span><br></pre></td></tr></table></figure>
<p>使用su命令，可以切换用户的身份</p>
<p>root–&gt;普通用户（直接切换）</p>
<p>普通用户–&gt;root（需要root用户的密码）</p>
<p>普通用户–&gt;普通用户（需要普通用户的密码）</p>
<ul>
<li><strong>例：从root用户切换到tom用户</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">su - tom</span></span><br></pre></td></tr></table></figure>
<p>(2)使用sudo命令提升权限</p>
<p>在命令前加上sudo，该命令就会取得管理员的权限。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
